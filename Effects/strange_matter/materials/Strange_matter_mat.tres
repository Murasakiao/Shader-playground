[gd_resource type="ShaderMaterial" load_steps=82 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 4

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 4

[sub_resource type="VisualShaderNodeVectorOp" id=7]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorOp" id=8]
output_port_for_preview = 0
operator = 2

[sub_resource type="OpenSimplexNoise" id=9]
period = 256.0
persistence = 1.0
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=10]
seamless = true
noise = SubResource( 9 )

[sub_resource type="VisualShaderNodeTexture" id=11]
output_port_for_preview = 0
texture = SubResource( 10 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=12]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=14]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
output_port_for_preview = 0
function = 12

[sub_resource type="OpenSimplexNoise" id=16]
seed = 6

[sub_resource type="NoiseTexture" id=17]
seamless = true
as_normalmap = true
noise = SubResource( 16 )

[sub_resource type="VisualShaderNodeTexture" id=18]
output_port_for_preview = 0
texture = SubResource( 17 )

[sub_resource type="VisualShaderNodeTexture" id=19]
output_port_for_preview = 0
texture = SubResource( 17 )

[sub_resource type="VisualShaderNodeScalarConstant" id=20]
constant = 0.8

[sub_resource type="VisualShaderNodeColorConstant" id=21]
constant = Color( 0.177417, 0.153861, 0.699456, 1 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=22]

[sub_resource type="VisualShaderNodeScalarConstant" id=23]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=24]
constant = 0.2

[sub_resource type="VisualShaderNodeVectorScalarMix" id=25]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=26]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.0 ]

[sub_resource type="NoiseTexture" id=27]
seamless = true
noise = SubResource( 16 )

[sub_resource type="VisualShaderNodeTexture" id=28]
output_port_for_preview = 0
texture = SubResource( 27 )

[sub_resource type="VisualShaderNodeTexture" id=29]
output_port_for_preview = 0
texture = SubResource( 27 )

[sub_resource type="OpenSimplexNoise" id=30]
seed = 10
persistence = 1.0

[sub_resource type="NoiseTexture" id=31]
seamless = true
noise = SubResource( 30 )

[sub_resource type="VisualShaderNodeTexture" id=32]
output_port_for_preview = 0
texture = SubResource( 31 )

[sub_resource type="VisualShaderNodeFresnel" id=33]
default_input_values = [ 2, false, 3, 3.0 ]

[sub_resource type="VisualShaderNodeVectorDecompose" id=34]

[sub_resource type="VisualShaderNodeScalarOp" id=35]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=36]
output_port_for_preview = 0
default_input_values = [ 0, 0.4, 1, 0.8, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarClamp" id=37]

[sub_resource type="OpenSimplexNoise" id=38]
seed = 10
period = 0.1
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=39]
seamless = true
noise = SubResource( 38 )

[sub_resource type="VisualShaderNodeTexture" id=40]
output_port_for_preview = 0
texture = SubResource( 39 )

[sub_resource type="VisualShaderNodeScalarOp" id=41]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=42]
output_port_for_preview = 0
default_input_values = [ 0, 0.1, 1, 0.6, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=43]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=44]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=45]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=46]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=47]

[sub_resource type="VisualShaderNodeInput" id=48]
input_name = "normal"

[sub_resource type="VisualShaderNodeScalarFunc" id=49]
function = 0

[sub_resource type="VisualShaderNodeInput" id=50]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=51]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=52]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.3 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=53]
output_port_for_preview = 0
default_input_values = [ 0, 0.8, 1, 0.2 ]

[sub_resource type="VisualShaderNodeScalarOp" id=54]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=55]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=56]

[sub_resource type="NoiseTexture" id=57]
seamless = true
noise = SubResource( 56 )

[sub_resource type="VisualShaderNodeTexture" id=58]
texture = SubResource( 57 )

[sub_resource type="VisualShaderNodeVectorOp" id=59]

[sub_resource type="Gradient" id=60]
colors = PoolColorArray( 0.152941, 0.701961, 1, 1, 0.231373, 1, 0.258824, 1 )

[sub_resource type="GradientTexture" id=61]
gradient = SubResource( 60 )

[sub_resource type="VisualShaderNodeTexture" id=62]
texture = SubResource( 61 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=63]

[sub_resource type="VisualShaderNodeInput" id=64]
input_name = "normal"

[sub_resource type="VisualShaderNodeColorConstant" id=65]
constant = Color( 0.0615357, 0.18063, 0.0222935, 1 )

[sub_resource type="VisualShaderNodeInput" id=66]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=67]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=68]

[sub_resource type="VisualShaderNodeInput" id=69]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=70]

[sub_resource type="VisualShaderNodeInput" id=71]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=72]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=73]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=74]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=75]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=76]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=77]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=78]

[sub_resource type="VisualShaderNodeScalarFunc" id=79]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=80]
default_input_values = [ 0, 0.0, 1, 6.0 ]
operator = 2

[sub_resource type="VisualShader" id=81]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_72;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_4;
uniform sampler2D tex_frg_38;
uniform sampler2D tex_frg_37;
uniform sampler2D tex_frg_75;
uniform sampler2D tex_frg_54;
uniform sampler2D tex_frg_26;
uniform sampler2D tex_frg_27;



void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;

// Input:13
	vec3 n_out13p0 = NORMAL;

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// VectorDecompose:6
	float n_out6p0 = n_out5p0.x;
	float n_out6p1 = n_out5p0.y;
	float n_out6p2 = n_out5p0.z;

// ScalarOp:9
	float n_in9p1 = 6.00000;
	float n_out9p0 = n_out6p1 * n_in9p1;

// Input:11
	float n_out11p0 = TIME;

// ScalarOp:10
	float n_out10p0 = n_out9p0 + n_out11p0;

// ScalarFunc:7
	float n_out7p0 = sin(n_out10p0);

// ScalarOp:15
	float n_in15p1 = 1.00000;
	float n_out15p0 = n_out7p0 + n_in15p1;

// ScalarOp:16
	float n_in16p1 = 2.00000;
	float n_out16p0 = n_out15p0 / n_in16p1;

// ScalarOp:17
	float n_in17p1 = 0.10000;
	float n_out17p0 = n_out16p0 * n_in17p1;

// VectorOp:14
	vec3 n_out14p0 = n_out13p0 * vec3(n_out17p0);

// VectorOp:12
	vec3 n_out12p0 = n_out2p0 + n_out14p0;

// Output:0
	VERTEX = n_out12p0;

}

void fragment() {
// Color:79
	vec3 n_out79p0 = vec3(0.061536, 0.180630, 0.022294);
	float n_out79p1 = 1.000000;

// Color:29
	vec3 n_out29p0 = vec3(0.177417, 0.153861, 0.699456);
	float n_out29p1 = 1.000000;

// Input:77
	vec3 n_out77p0 = NORMAL;

// VectorScalarMix:76
	vec3 n_out76p0 = mix(n_out79p0, n_out29p0, dot(n_out77p0, vec3(0.333333, 0.333333, 0.333333)));

// Input:61
	vec3 n_out61p0 = NORMAL;

// Texture:72
	vec4 tex_frg_72_read = texture(tex_frg_72, UV.xy);
	vec3 n_out72p0 = tex_frg_72_read.rgb;
	float n_out72p1 = tex_frg_72_read.a;

// VectorOp:73
	vec3 n_out73p0 = n_out61p0 + n_out72p0;

// Fresnel:45
	float n_in45p3 = 3.00000;
	float n_out45p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in45p3);

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorDecompose:3
	float n_out3p0 = n_out2p0.x;
	float n_out3p1 = n_out2p0.y;
	float n_out3p2 = n_out2p0.z;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;

// VectorCompose:6
	float n_in6p2 = 0.00000;
	vec3 n_out6p0 = vec3(n_out3p0, n_out5p1, n_in6p2);

// Input:13
	float n_out13p0 = TIME;

// ScalarOp:14
	float n_in14p1 = 0.20000;
	float n_out14p0 = n_out13p0 * n_in14p1;

// ScalarOp:15
	float n_in15p1 = 1.00000;
	float n_out15p0 = mod(n_out14p0, n_in15p1);

// VectorOp:10
	vec3 n_out10p0 = n_out6p0 * vec3(n_out15p0);

// VectorOp:9
	vec3 n_out9p0 = n_out8p0 + n_out10p0;

// Texture:38
	vec4 tex_frg_38_read = texture(tex_frg_38, n_out9p0.xy);
	vec3 n_out38p0 = tex_frg_38_read.rgb;
	float n_out38p1 = tex_frg_38_read.a;

// ScalarOp:16
	float n_in16p1 = 0.50000;
	float n_out16p0 = n_out14p0 + n_in16p1;

// ScalarOp:17
	float n_in17p1 = 1.00000;
	float n_out17p0 = mod(n_out16p0, n_in17p1);

// VectorOp:19
	vec3 n_out19p0 = n_out6p0 * vec3(n_out17p0);

// VectorOp:18
	vec3 n_out18p0 = n_out8p0 + n_out19p0;

// Texture:37
	vec4 tex_frg_37_read = texture(tex_frg_37, n_out18p0.xy);
	vec3 n_out37p0 = tex_frg_37_read.rgb;
	float n_out37p1 = tex_frg_37_read.a;

// ScalarOp:23
	float n_in23p1 = 2.00000;
	float n_out23p0 = n_out15p0 * n_in23p1;

// ScalarOp:24
	float n_in24p1 = 1.00000;
	float n_out24p0 = n_out23p0 - n_in24p1;

// ScalarFunc:25
	float n_out25p0 = abs(n_out24p0);

// VectorScalarMix:36
	vec3 n_out36p0 = mix(n_out38p0, n_out37p0, n_out25p0);

// ScalarSmoothStep:51
	float n_in51p0 = 0.40000;
	float n_in51p1 = 0.80000;
	float n_out51p0 = smoothstep(n_in51p0, n_in51p1, dot(n_out36p0, vec3(0.333333, 0.333333, 0.333333)));

// ScalarOp:50
	float n_out50p0 = n_out45p0 - n_out51p0;

// ScalarClamp:52
	float n_in52p1 = 0.00000;
	float n_in52p2 = 1.00000;
	float n_out52p0 = clamp(n_out50p0, n_in52p1, n_in52p2);

// VectorScalarMix:33
	vec3 n_out33p0 = mix(n_out76p0, n_out73p0, n_out52p0);

// Scalar:30
	float n_out30p0 = 1.000000;

// Scalar:31
	float n_out31p0 = 0.200000;

// Scalar:28
	float n_out28p0 = 0.800000;

// Texture:75
	vec4 tex_frg_75_read = texture(tex_frg_75, n_out73p0.xy);
	vec3 n_out75p0 = tex_frg_75_read.rgb;
	float n_out75p1 = tex_frg_75_read.a;

// Input:64
	float n_out64p0 = TIME;

// ScalarFunc:63
	float n_out63p0 = sin(n_out64p0);

// ScalarOp:65
	float n_in65p1 = 1.00000;
	float n_out65p0 = n_out63p0 + n_in65p1;

// ScalarOp:68
	float n_in68p1 = 2.00000;
	float n_out68p0 = n_out65p0 / n_in68p1;

// ScalarOp:66
	float n_in66p1 = 0.30000;
	float n_out66p0 = n_out68p0 * n_in66p1;

// ScalarOp:67
	float n_in67p0 = 0.80000;
	float n_out67p0 = n_in67p0 + n_out66p0;

// Input:58
	vec3 n_out58p0 = vec3(UV, 0.0);

// VectorOp:59
	vec3 n_in59p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out59p0 = n_out58p0 * n_in59p1;

// Texture:54
	vec4 tex_frg_54_read = texture(tex_frg_54, n_out59p0.xy);
	vec3 n_out54p0 = tex_frg_54_read.rgb;
	float n_out54p1 = tex_frg_54_read.a;

// ScalarOp:55
	float n_out55p0 = dot(n_out54p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out36p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarSmoothStep:56
	float n_in56p0 = 0.10000;
	float n_out56p0 = smoothstep(n_in56p0, n_out67p0, n_out55p0);

// ScalarOp:57
	float n_in57p1 = 10.00000;
	float n_out57p0 = n_out56p0 * n_in57p1;

// VectorScalarMix:60
	vec3 n_in60p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out60p0 = mix(n_in60p0, n_out75p0, n_out57p0);

// Texture:26
	vec4 tex_frg_26_read = texture(tex_frg_26, n_out9p0.xy);
	vec3 n_out26p0 = tex_frg_26_read.rgb;
	float n_out26p1 = tex_frg_26_read.a;

// Texture:27
	vec4 tex_frg_27_read = texture(tex_frg_27, n_out18p0.xy);
	vec3 n_out27p0 = tex_frg_27_read.rgb;
	float n_out27p1 = tex_frg_27_read.a;

// VectorScalarMix:22
	vec3 n_out22p0 = mix(n_out26p0, n_out27p0, n_out25p0);

// Output:0
	ALBEDO = n_out33p0;
	METALLIC = n_out30p0;
	ROUGHNESS = n_out31p0;
	SPECULAR = n_out28p0;
	EMISSION = n_out60p0;
	NORMALMAP = n_out22p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -622, 103 )
nodes/vertex/0/position = Vector2( 640, 180 )
nodes/vertex/2/node = SubResource( 76 )
nodes/vertex/2/position = Vector2( -100, 120 )
nodes/vertex/5/node = SubResource( 77 )
nodes/vertex/5/position = Vector2( -560, 240 )
nodes/vertex/6/node = SubResource( 78 )
nodes/vertex/6/position = Vector2( -520, 300 )
nodes/vertex/7/node = SubResource( 79 )
nodes/vertex/7/position = Vector2( 60, 380 )
nodes/vertex/9/node = SubResource( 80 )
nodes/vertex/9/position = Vector2( -300, 280 )
nodes/vertex/10/node = SubResource( 68 )
nodes/vertex/10/position = Vector2( -80, 360 )
nodes/vertex/11/node = SubResource( 69 )
nodes/vertex/11/position = Vector2( -280, 420 )
nodes/vertex/12/node = SubResource( 70 )
nodes/vertex/12/position = Vector2( 420, 180 )
nodes/vertex/13/node = SubResource( 71 )
nodes/vertex/13/position = Vector2( 0, 240 )
nodes/vertex/14/node = SubResource( 72 )
nodes/vertex/14/position = Vector2( 220, 240 )
nodes/vertex/15/node = SubResource( 73 )
nodes/vertex/15/position = Vector2( 140, 480 )
nodes/vertex/16/node = SubResource( 74 )
nodes/vertex/16/position = Vector2( 300, 480 )
nodes/vertex/17/node = SubResource( 75 )
nodes/vertex/17/position = Vector2( 240, 340 )
nodes/vertex/connections = PoolIntArray( 5, 0, 6, 0, 10, 0, 7, 0, 9, 0, 10, 0, 11, 0, 10, 1, 2, 0, 12, 0, 12, 0, 0, 0, 13, 0, 14, 0, 7, 0, 15, 0, 15, 0, 16, 0, 16, 0, 17, 0, 17, 0, 14, 1, 14, 0, 12, 1, 6, 1, 9, 0 )
nodes/fragment/0/position = Vector2( 3380, -20 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( -120, -160 )
nodes/fragment/3/node = SubResource( 22 )
nodes/fragment/3/position = Vector2( 100, 120 )
nodes/fragment/4/node = SubResource( 32 )
nodes/fragment/4/position = Vector2( -120, 180 )
nodes/fragment/5/node = SubResource( 34 )
nodes/fragment/5/position = Vector2( 100, 240 )
nodes/fragment/6/node = SubResource( 46 )
nodes/fragment/6/position = Vector2( 400, 140 )
nodes/fragment/8/node = SubResource( 66 )
nodes/fragment/8/position = Vector2( 820, 380 )
nodes/fragment/9/node = SubResource( 67 )
nodes/fragment/9/position = Vector2( 1020, 160 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 680, 180 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( 0, 520 )
nodes/fragment/14/node = SubResource( 3 )
nodes/fragment/14/position = Vector2( 180, 500 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( 380, 500 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( 200, 620 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( 380, 620 )
nodes/fragment/18/node = SubResource( 7 )
nodes/fragment/18/position = Vector2( 980, 420 )
nodes/fragment/19/node = SubResource( 8 )
nodes/fragment/19/position = Vector2( 680, 440 )
nodes/fragment/22/node = SubResource( 12 )
nodes/fragment/22/position = Vector2( 1540, 220 )
nodes/fragment/23/node = SubResource( 13 )
nodes/fragment/23/position = Vector2( 620, 720 )
nodes/fragment/24/node = SubResource( 14 )
nodes/fragment/24/position = Vector2( 800, 720 )
nodes/fragment/25/node = SubResource( 15 )
nodes/fragment/25/position = Vector2( 980, 760 )
nodes/fragment/26/node = SubResource( 18 )
nodes/fragment/26/position = Vector2( 1240, 80 )
nodes/fragment/27/node = SubResource( 19 )
nodes/fragment/27/position = Vector2( 1240, 420 )
nodes/fragment/28/node = SubResource( 20 )
nodes/fragment/28/position = Vector2( 2740, 80 )
nodes/fragment/29/node = SubResource( 21 )
nodes/fragment/29/position = Vector2( 2080, -260 )
nodes/fragment/30/node = SubResource( 23 )
nodes/fragment/30/position = Vector2( 2740, -40 )
nodes/fragment/31/node = SubResource( 24 )
nodes/fragment/31/position = Vector2( 2740, 20 )
nodes/fragment/33/node = SubResource( 25 )
nodes/fragment/33/position = Vector2( 2420, -240 )
nodes/fragment/36/node = SubResource( 26 )
nodes/fragment/36/position = Vector2( 1660, 1180 )
nodes/fragment/37/node = SubResource( 28 )
nodes/fragment/37/position = Vector2( 1260, 1220 )
nodes/fragment/38/node = SubResource( 29 )
nodes/fragment/38/position = Vector2( 1260, 860 )
nodes/fragment/45/node = SubResource( 33 )
nodes/fragment/45/position = Vector2( 1820, -200 )
nodes/fragment/50/node = SubResource( 35 )
nodes/fragment/50/position = Vector2( 2100, -80 )
nodes/fragment/51/node = SubResource( 36 )
nodes/fragment/51/position = Vector2( 1860, -60 )
nodes/fragment/52/node = SubResource( 37 )
nodes/fragment/52/position = Vector2( 2260, -80 )
nodes/fragment/54/node = SubResource( 40 )
nodes/fragment/54/position = Vector2( 2040, 900 )
nodes/fragment/55/node = SubResource( 41 )
nodes/fragment/55/position = Vector2( 2320, 1040 )
nodes/fragment/56/node = SubResource( 42 )
nodes/fragment/56/position = Vector2( 3120, 800 )
nodes/fragment/57/node = SubResource( 43 )
nodes/fragment/57/position = Vector2( 3320, 740 )
nodes/fragment/58/node = SubResource( 44 )
nodes/fragment/58/position = Vector2( 1720, 980 )
nodes/fragment/59/node = SubResource( 45 )
nodes/fragment/59/position = Vector2( 1860, 1040 )
nodes/fragment/60/node = SubResource( 47 )
nodes/fragment/60/position = Vector2( 3080, 280 )
nodes/fragment/61/node = SubResource( 48 )
nodes/fragment/61/position = Vector2( 2120, 320 )
nodes/fragment/63/node = SubResource( 49 )
nodes/fragment/63/position = Vector2( 2080, 720 )
nodes/fragment/64/node = SubResource( 50 )
nodes/fragment/64/position = Vector2( 1840, 720 )
nodes/fragment/65/node = SubResource( 51 )
nodes/fragment/65/position = Vector2( 2280, 720 )
nodes/fragment/66/node = SubResource( 52 )
nodes/fragment/66/position = Vector2( 2640, 720 )
nodes/fragment/67/node = SubResource( 53 )
nodes/fragment/67/position = Vector2( 2820, 720 )
nodes/fragment/68/node = SubResource( 54 )
nodes/fragment/68/position = Vector2( 2460, 720 )
nodes/fragment/69/node = SubResource( 55 )
nodes/fragment/69/position = Vector2( 1660, 780 )
nodes/fragment/72/node = SubResource( 58 )
nodes/fragment/72/position = Vector2( 2080, 420 )
nodes/fragment/73/node = SubResource( 59 )
nodes/fragment/73/position = Vector2( 2340, 440 )
nodes/fragment/75/node = SubResource( 62 )
nodes/fragment/75/position = Vector2( 2620, 420 )
nodes/fragment/76/node = SubResource( 63 )
nodes/fragment/76/position = Vector2( 2178.4, -382.241 )
nodes/fragment/77/node = SubResource( 64 )
nodes/fragment/77/position = Vector2( 1700, -420 )
nodes/fragment/79/node = SubResource( 65 )
nodes/fragment/79/position = Vector2( 1820, -320 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 10, 0, 10, 0, 9, 1, 13, 0, 14, 0, 14, 0, 15, 0, 14, 0, 16, 0, 16, 0, 17, 0, 15, 0, 10, 1, 19, 0, 18, 1, 15, 0, 23, 0, 23, 0, 24, 0, 24, 0, 25, 0, 25, 0, 22, 2, 17, 0, 19, 1, 6, 0, 19, 0, 9, 0, 26, 0, 18, 0, 27, 0, 26, 0, 22, 0, 27, 0, 22, 1, 22, 0, 0, 8, 28, 0, 0, 4, 3, 0, 6, 0, 38, 0, 36, 0, 37, 0, 36, 1, 9, 0, 38, 0, 18, 0, 37, 0, 31, 0, 0, 3, 30, 0, 0, 2, 45, 0, 50, 0, 36, 0, 51, 2, 50, 0, 52, 0, 52, 0, 33, 2, 51, 0, 50, 1, 5, 1, 6, 1, 36, 0, 55, 1, 54, 0, 55, 0, 56, 0, 57, 0, 55, 0, 56, 2, 63, 0, 65, 0, 66, 0, 67, 1, 65, 0, 68, 0, 68, 0, 66, 0, 57, 0, 60, 2, 64, 0, 63, 0, 25, 0, 36, 2, 61, 0, 73, 0, 72, 0, 73, 1, 60, 0, 0, 5, 73, 0, 33, 1, 73, 0, 75, 0, 75, 0, 60, 1, 33, 0, 0, 0, 59, 0, 54, 0, 58, 0, 59, 0, 8, 0, 18, 0, 8, 0, 9, 0, 79, 0, 76, 0, 29, 0, 76, 1, 67, 0, 56, 1, 76, 0, 33, 0, 77, 0, 76, 2 )

[resource]
shader = SubResource( 81 )
