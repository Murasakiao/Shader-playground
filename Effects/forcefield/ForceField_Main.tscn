[gd_scene load_steps=18 format=2]

[ext_resource path="res://Effects/forcefield/demi_sphere.obj" type="ArrayMesh" id=1]
[ext_resource path="res://Effects/forcefield/Strange_matter_mat_truc.tres" type="Material" id=2]
[ext_resource path="res://HDRI/photo_studio_loft_hall_4k.hdr" type="Texture" id=3]
[ext_resource path="res://Effects/forcefield/caustic.jpg" type="Texture" id=4]

[sub_resource type="SpatialMaterial" id=3]
albedo_color = Color( 0.12549, 0.117647, 0.117647, 1 )
metallic_specular = 0.1

[sub_resource type="PanoramaSky" id=2]
panorama = ExtResource( 3 )

[sub_resource type="Environment" id=1]
background_mode = 2
background_sky = SubResource( 2 )
tonemap_mode = 2
ssao_enabled = true
glow_enabled = true
glow_levels/1 = true
glow_levels/2 = true
glow_levels/4 = true
glow_levels/6 = true
glow_levels/7 = true
glow_intensity = 0.1
glow_strength = 0.8

[sub_resource type="VisualShaderNodeTextureUniform" id=21]
uniform_name = "CausticTexture"
texture_type = 1

[sub_resource type="VisualShaderNodeExpression" id=6]
size = Vector2( 1525.84, 544.56 )
expression = "float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
vec3 world_pos = world_pos_from_depth(depth, SCREEN_UV, INV_PROJECTION_MATRIX, (CAMERA_MATRIX));
vec4 test_pos = (inverse(WORLD_MATRIX) * vec4(world_pos, 1.0));
final = test_pos.xzy;
float cube_half_size = 1.0;
mask = !(abs(test_pos.x) > cube_half_size ||abs(test_pos.y) > cube_half_size || abs(test_pos.z) > cube_half_size);"

[sub_resource type="VisualShaderNodeTransformUniform" id=10]
uniform_name = "Orientation"

[sub_resource type="VisualShaderNodeExpression" id=11]
size = Vector2( 1200.4, 566.16 )
expression = "float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
float z = depth * 2.0 - 1.0;
vec4 clipSpacePosition = vec4(SCREEN_UV * 2.0 - 1.0, z, 1.0);
vec4 viewSpacePosition = INV_PROJECTION_MATRIX * clipSpacePosition;
viewSpacePosition /= viewSpacePosition.w;
vec4 worldSpacePositionFull = CAMERA_MATRIX * viewSpacePosition;
worldSpacePosition = worldSpacePositionFull.xyz;

vec4 test_pos = (inverse(WORLD_MATRIX) * vec4(worldSpacePosition, 1.0));
float cube_half_size = 4.0;
mask = !(abs(test_pos.x) > cube_half_size ||abs(test_pos.y) > cube_half_size || abs(test_pos.z) > cube_half_size);"

[sub_resource type="VisualShaderNodeGlobalExpression" id=12]
size = Vector2( 1199.54, 568.038 )
expression = "vec3 world_pos_from_depth(float depth, vec2 screen_uv, mat4 inverse_proj, mat4 inverse_view) {
	float z = depth * 2.0 - 1.0;
	
	vec4 clipSpacePosition = vec4(screen_uv * 2.0 - 1.0, z, 1.0);
	vec4 viewSpacePosition = inverse_proj * clipSpacePosition;
	
	viewSpacePosition /= viewSpacePosition.w;
	
	vec4 worldSpacePosition = inverse_view * viewSpacePosition;
	
	return worldSpacePosition.xyz;
}"

[sub_resource type="VisualShaderNodeGlobalExpression" id=13]
size = Vector2( 987.28, 537.36 )
expression = "// Source : https://github.com/MaxBittker/glsl-voronoi-noise

vec3 hash( vec3 x )
{
	x = vec3( dot(x,vec3(127.1,311.7, 74.7)),
			  dot(x,vec3(269.5,183.3,246.1)),
			  dot(x,vec3(113.5,271.9,124.6)));

	return fract(sin(x)*43758.5453123);
}

vec3 voronoi( vec3 x )
{
    vec3 p = floor( x );
    vec3 f = fract( x );

	float id = 0.0;
    vec2 res = vec2( 100.0 );
    for( int k=-1; k<=1; k++ )
    for( int j=-1; j<=1; j++ )
    for( int i=-1; i<=1; i++ )
    {
        vec3 b = vec3( float(i), float(j), float(k) );
        vec3 r = vec3( b ) - f + hash( p + b );
        float d = dot( r, r );

        if( d < res.x )
        {
			id = dot( p+b, vec3(1.0,57.0,113.0 ) );
            res = vec2( d, res.x );			
        }
        else if( d < res.y )
        {
            res.y = d;
        }
    }

    return vec3( sqrt( res ), abs(id) );
}
"

[sub_resource type="VisualShaderNodeExpression" id=22]
size = Vector2( 1213, 426 )
expression = "vec4 c_1 = texture(caustic_tex, vec2(input_uv.x + TIME * .02, input_uv.y) * 0.8);
vec4 c_2 = texture(caustic_tex, vec2(input_uv.x, input_uv.y - TIME * .06) * 0.6);

vec3 c = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;
caustics = min(c_1, c_2).xyz;
caustics += c;"

[sub_resource type="VisualShader" id=4]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, specular_schlick_ggx, unshaded;

uniform sampler2D CausticTexture : hint_albedo;
uniform mat4 Orientation;


// GlobalExpression:0
	vec3 world_pos_from_depth(float depth, vec2 screen_uv, mat4 inverse_proj, mat4 inverse_view) {
		float z = depth * 2.0 - 1.0;
		
		vec4 clipSpacePosition = vec4(screen_uv * 2.0 - 1.0, z, 1.0);
		vec4 viewSpacePosition = inverse_proj * clipSpacePosition;
		
		viewSpacePosition /= viewSpacePosition.w;
		
		vec4 worldSpacePosition = inverse_view * viewSpacePosition;
		
		return worldSpacePosition.xyz;
	}
// GlobalExpression:1
	// Source : https://github.com/MaxBittker/glsl-voronoi-noise
	
	vec3 hash( vec3 x )
	{
		x = vec3( dot(x,vec3(127.1,311.7, 74.7)),
				  dot(x,vec3(269.5,183.3,246.1)),
				  dot(x,vec3(113.5,271.9,124.6)));
	
		return fract(sin(x)*43758.5453123);
	}
	
	vec3 voronoi( vec3 x )
	{
	    vec3 p = floor( x );
	    vec3 f = fract( x );
	
		float id = 0.0;
	    vec2 res = vec2( 100.0 );
	    for( int k=-1; k<=1; k++ )
	    for( int j=-1; j<=1; j++ )
	    for( int i=-1; i<=1; i++ )
	    {
	        vec3 b = vec3( float(i), float(j), float(k) );
	        vec3 r = vec3( b ) - f + hash( p + b );
	        float d = dot( r, r );
	
	        if( d < res.x )
	        {
				id = dot( p+b, vec3(1.0,57.0,113.0 ) );
	            res = vec2( d, res.x );			
	        }
	        else if( d < res.y )
	        {
	            res.y = d;
	        }
	    }
	
	    return vec3( sqrt( res ), abs(id) );
	}
	

void vertex() {
// Output:0

}

void fragment() {
// TransformUniform:5
	mat4 n_out5p0 = Orientation;

// Expression:2
	vec3 n_out2p0;
	bool n_out2p1;
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	n_out2p1 = false;
	{
		float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
		vec3 world_pos = world_pos_from_depth(depth, SCREEN_UV, INV_PROJECTION_MATRIX, (CAMERA_MATRIX));
		vec4 test_pos = (inverse(WORLD_MATRIX) * vec4(world_pos, 1.0));
		n_out2p0 = test_pos.xzy;
		float cube_half_size = 1.0;
		n_out2p1 = !(abs(test_pos.x) > cube_half_size ||abs(test_pos.y) > cube_half_size || abs(test_pos.z) > cube_half_size);
	}

// Expression:9
	vec3 n_out9p0;
	n_out9p0 = vec3(0.0, 0.0, 0.0);
	{
		vec4 c_1 = texture(CausticTexture, vec2(n_out2p0.x + TIME * .02, n_out2p0.y) * 0.8);
		vec4 c_2 = texture(CausticTexture, vec2(n_out2p0.x, n_out2p0.y - TIME * .06) * 0.6);
		
		vec3 c = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;
		n_out9p0 = min(c_1, c_2).xyz;
		n_out9p0 += c;
	}

// Output:0
	ALBEDO = n_out9p0;
	ALPHA = (n_out2p1 ? 1.0 : 0.0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 867.854, 155.754 )
modes/depth_draw = 3
flags/unshaded = true
nodes/fragment/0/position = Vector2( 2640, 320 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -660, 200 )
nodes/fragment/2/size = Vector2( 1525.84, 544.56 )
nodes/fragment/2/input_ports = "0,3,ORIENTATION_MATRIX;"
nodes/fragment/2/output_ports = "0,1,final;1,2,mask;"
nodes/fragment/2/expression = "float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
vec3 world_pos = world_pos_from_depth(depth, SCREEN_UV, INV_PROJECTION_MATRIX, (CAMERA_MATRIX));
vec4 test_pos = (inverse(WORLD_MATRIX) * vec4(world_pos, 1.0));
final = test_pos.xzy;
float cube_half_size = 1.0;
mask = !(abs(test_pos.x) > cube_half_size ||abs(test_pos.y) > cube_half_size || abs(test_pos.z) > cube_half_size);"
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( -1020, 200 )
nodes/fragment/6/node = SubResource( 11 )
nodes/fragment/6/position = Vector2( -740, 740 )
nodes/fragment/6/size = Vector2( 1200.4, 566.16 )
nodes/fragment/6/input_ports = "0,3,ORIENTATION_MATRIX;"
nodes/fragment/6/output_ports = "0,1,worldSpacePosition;1,1,positionOS;"
nodes/fragment/6/expression = "float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
float z = depth * 2.0 - 1.0;
vec4 clipSpacePosition = vec4(SCREEN_UV * 2.0 - 1.0, z, 1.0);
vec4 viewSpacePosition = INV_PROJECTION_MATRIX * clipSpacePosition;
viewSpacePosition /= viewSpacePosition.w;
vec4 worldSpacePositionFull = CAMERA_MATRIX * viewSpacePosition;
worldSpacePosition = worldSpacePositionFull.xyz;

vec4 test_pos = (inverse(WORLD_MATRIX) * vec4(worldSpacePosition, 1.0));
float cube_half_size = 4.0;
mask = !(abs(test_pos.x) > cube_half_size ||abs(test_pos.y) > cube_half_size || abs(test_pos.z) > cube_half_size);"
nodes/fragment/7/node = SubResource( 12 )
nodes/fragment/7/position = Vector2( -2380, 260 )
nodes/fragment/7/size = Vector2( 1199.54, 568.038 )
nodes/fragment/7/input_ports = ""
nodes/fragment/7/output_ports = ""
nodes/fragment/7/expression = "vec3 world_pos_from_depth(float depth, vec2 screen_uv, mat4 inverse_proj, mat4 inverse_view) {
	float z = depth * 2.0 - 1.0;
	
	vec4 clipSpacePosition = vec4(screen_uv * 2.0 - 1.0, z, 1.0);
	vec4 viewSpacePosition = inverse_proj * clipSpacePosition;
	
	viewSpacePosition /= viewSpacePosition.w;
	
	vec4 worldSpacePosition = inverse_view * viewSpacePosition;
	
	return worldSpacePosition.xyz;
}"
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( -2060, -320 )
nodes/fragment/8/size = Vector2( 987.28, 537.36 )
nodes/fragment/8/input_ports = ""
nodes/fragment/8/output_ports = ""
nodes/fragment/8/expression = "// Source : https://github.com/MaxBittker/glsl-voronoi-noise

vec3 hash( vec3 x )
{
	x = vec3( dot(x,vec3(127.1,311.7, 74.7)),
			  dot(x,vec3(269.5,183.3,246.1)),
			  dot(x,vec3(113.5,271.9,124.6)));

	return fract(sin(x)*43758.5453123);
}

vec3 voronoi( vec3 x )
{
    vec3 p = floor( x );
    vec3 f = fract( x );

	float id = 0.0;
    vec2 res = vec2( 100.0 );
    for( int k=-1; k<=1; k++ )
    for( int j=-1; j<=1; j++ )
    for( int i=-1; i<=1; i++ )
    {
        vec3 b = vec3( float(i), float(j), float(k) );
        vec3 r = vec3( b ) - f + hash( p + b );
        float d = dot( r, r );

        if( d < res.x )
        {
			id = dot( p+b, vec3(1.0,57.0,113.0 ) );
            res = vec2( d, res.x );			
        }
        else if( d < res.y )
        {
            res.y = d;
        }
    }

    return vec3( sqrt( res ), abs(id) );
}
"
nodes/fragment/9/node = SubResource( 22 )
nodes/fragment/9/position = Vector2( 940, 80 )
nodes/fragment/9/size = Vector2( 1213, 426 )
nodes/fragment/9/input_ports = "0,4,caustic_tex;1,1,input_uv;"
nodes/fragment/9/output_ports = "0,1,caustics;"
nodes/fragment/9/expression = "vec4 c_1 = texture(caustic_tex, vec2(input_uv.x + TIME * .02, input_uv.y) * 0.8);
vec4 c_2 = texture(caustic_tex, vec2(input_uv.x, input_uv.y - TIME * .06) * 0.6);

vec3 c = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;
caustics = min(c_1, c_2).xyz;
caustics += c;"
nodes/fragment/11/node = SubResource( 21 )
nodes/fragment/11/position = Vector2( 900, -20 )
nodes/fragment/connections = PoolIntArray( 5, 0, 2, 0, 11, 2, 9, 0, 2, 0, 9, 1, 9, 0, 0, 0, 2, 1, 0, 1 )

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/Orientation = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
shader_param/CausticTexture = ExtResource( 4 )

[sub_resource type="SphereMesh" id=20]

[node name="Spatial" type="Spatial"]

[node name="Magic" type="MeshInstance" parent="."]
visible = false
material_override = ExtResource( 2 )
mesh = ExtResource( 1 )
material/0 = null

[node name="CSGBox" type="CSGBox" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.968431, 0 )
material_override = SubResource( 3 )
width = 3.23376
depth = 4.21837

[node name="CSGSphere" type="CSGSphere" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.677337, -0.438934, 0 )
snap = 0.0001
radial_segments = 32
rings = 64
material = SubResource( 3 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.67721, 0.354132, -0.644963, 0, 0.876559, 0.481295, 0.73579, -0.325938, 0.593614, 0, 3.00584, 0 )
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 1 )

[node name="Caustic" type="CSGBox" parent="."]
transform = Transform( 0.888184, -0.29834, 0.349459, 0, 0.760542, 0.649289, -0.459487, -0.576688, 0.675501, -2.38419e-07, 0.0546259, 0.229381 )
material_override = SubResource( 5 )
height = 2.4056

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.302647, 1.28456 )
material_override = SubResource( 3 )
mesh = SubResource( 20 )
material/0 = null
