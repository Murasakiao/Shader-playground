[gd_scene load_steps=46 format=2]

[ext_resource path="res://Effects/star_attack/meshes/impact.obj" type="ArrayMesh" id=1]
[ext_resource path="res://Effects/star_attack/components/Impact.gd" type="Script" id=2]
[ext_resource path="res://Effects/star_attack/meshes/impact_top.obj" type="ArrayMesh" id=3]

[sub_resource type="VisualShaderNodeVectorOp" id=32]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=33]
constant = 2.0

[sub_resource type="VisualShaderNodeVectorCompose" id=35]
default_input_values = [ 0, 2.0, 1, 0.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeVectorDistance" id=36]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=37]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=38]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=39]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=40]
output_port_for_preview = 0
default_input_values = [ 0, 0.5, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarUniform" id=41]
uniform_name = "OffsetX"

[sub_resource type="VisualShaderNodeGlobalExpression" id=20]
size = Vector2( 584, 362 )
expression = "vec2 random(vec2 uv) {
	return vec2(fract(sin(dot(uv.xy,
		vec2(12.9898,78.233))) * 43758.5453123));
}

float worley(vec2 uv, float columns, float rows) {
	
	vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = random(index_uv + neighbor);
			
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	return minimum_dist;
}"

[sub_resource type="VisualShaderNodeScalarUniform" id=42]
uniform_name = "OffsetY"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=47]

[sub_resource type="VisualShaderNodeColorConstant" id=48]
constant = Color( 0.117592, 0.876953, 0.316331, 1 )

[sub_resource type="VisualShaderNodeExpression" id=21]
output_port_for_preview = 0
size = Vector2( 533, 349 )
expression = "output0 = worley(UV + random.xy,1.5,1.5);"

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=25]
default_input_values = [ 0, 0.1, 1, 0.2, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarUniform" id=26]
uniform_name = "Range"

[sub_resource type="VisualShaderNodeScalarOp" id=27]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 1

[sub_resource type="VisualShaderNodeColorConstant" id=28]
constant = Color( 0.0875293, 0.205693, 0.791016, 1 )

[sub_resource type="VisualShader" id=23]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform float Range;
uniform float OffsetX;
uniform float OffsetY;


// GlobalExpression:0
	vec2 random(vec2 uv) {
		return vec2(fract(sin(dot(uv.xy,
			vec2(12.9898,78.233))) * 43758.5453123));
	}
	
	float worley(vec2 uv, float columns, float rows) {
		
		vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
		vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
		
		float minimum_dist = 1.0;  
		
		for (int y= -1; y <= 1; y++) {
			for (int x= -1; x <= 1; x++) {
				vec2 neighbor = vec2(float(x),float(y));
				vec2 point = random(index_uv + neighbor);
				
				vec2 diff = neighbor + point - fract_uv;
				float dist = length(diff);
				minimum_dist = min(minimum_dist, dist);
			}
		}
		
		return minimum_dist;
	}

void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:5
	float n_out5p0 = Range;

// ScalarOp:6
	float n_in6p1 = 0.10000;
	float n_out6p0 = n_out5p0 - n_in6p1;

// ScalarUniform:19
	float n_out19p0 = OffsetX;

// ScalarUniform:20
	float n_out20p0 = OffsetY;

// VectorCompose:13
	float n_in13p2 = 0.00000;
	vec3 n_out13p0 = vec3(n_out19p0, n_out20p0, n_in13p2);

// Expression:3
	float n_out3p0;
	n_out3p0 = 0.0;
	{
		n_out3p0 = worley(UV + n_out13p0.xy,1.5,1.5);
	}

// ScalarSmoothStep:4
	float n_out4p0 = smoothstep(n_out6p0, n_out5p0, n_out3p0);

// Input:15
	vec3 n_out15p0 = vec3(UV, 0.0);

// Distance:14
	vec3 n_in14p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_out14p0 = distance(n_out15p0, n_in14p1);

// ScalarOp:16
	float n_in16p0 = 1.00000;
	float n_out16p0 = n_in16p0 - n_out14p0;

// ScalarOp:17
	float n_out17p0 = n_out4p0 * n_out16p0;

// ScalarSmoothStep:18
	float n_in18p0 = 0.50000;
	float n_in18p1 = 1.00000;
	float n_out18p0 = smoothstep(n_in18p0, n_in18p1, n_out17p0);

// Color:22
	vec3 n_out22p0 = vec3(0.117592, 0.876953, 0.316331);
	float n_out22p1 = 1.000000;

// Color:7
	vec3 n_out7p0 = vec3(0.087529, 0.205693, 0.791016);
	float n_out7p1 = 1.000000;

// VectorScalarMix:21
	vec3 n_out21p0 = mix(n_out22p0, n_out7p0, n_out14p0);

// Scalar:12
	float n_out12p0 = 2.000000;

// VectorOp:11
	vec3 n_out11p0 = n_out21p0 * vec3(n_out12p0);

// Output:0
	ALPHA = n_out18p0;
	EMISSION = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 572.672, 286.5 )
nodes/fragment/0/position = Vector2( 1691, 19 )
nodes/fragment/2/node = SubResource( 20 )
nodes/fragment/2/position = Vector2( -1140, 133 )
nodes/fragment/2/size = Vector2( 584, 362 )
nodes/fragment/2/input_ports = ""
nodes/fragment/2/output_ports = ""
nodes/fragment/2/expression = "vec2 random(vec2 uv) {
	return vec2(fract(sin(dot(uv.xy,
		vec2(12.9898,78.233))) * 43758.5453123));
}

float worley(vec2 uv, float columns, float rows) {
	
	vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = random(index_uv + neighbor);
			
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	return minimum_dist;
}"
nodes/fragment/3/node = SubResource( 21 )
nodes/fragment/3/position = Vector2( 76, 133 )
nodes/fragment/3/size = Vector2( 533, 349 )
nodes/fragment/3/input_ports = "0,1,random;"
nodes/fragment/3/output_ports = "0,0,output0;"
nodes/fragment/3/expression = "output0 = worley(UV + random.xy,1.5,1.5);"
nodes/fragment/4/node = SubResource( 25 )
nodes/fragment/4/position = Vector2( 893, 76 )
nodes/fragment/5/node = SubResource( 26 )
nodes/fragment/5/position = Vector2( 399, -76 )
nodes/fragment/6/node = SubResource( 27 )
nodes/fragment/6/position = Vector2( 741, -114 )
nodes/fragment/7/node = SubResource( 28 )
nodes/fragment/7/position = Vector2( 874, 551 )
nodes/fragment/11/node = SubResource( 32 )
nodes/fragment/11/position = Vector2( 1444, 456 )
nodes/fragment/12/node = SubResource( 33 )
nodes/fragment/12/position = Vector2( 1083, 570 )
nodes/fragment/13/node = SubResource( 35 )
nodes/fragment/13/position = Vector2( -171, 171 )
nodes/fragment/14/node = SubResource( 36 )
nodes/fragment/14/position = Vector2( 722, 380 )
nodes/fragment/15/node = SubResource( 37 )
nodes/fragment/15/position = Vector2( 722, 456 )
nodes/fragment/16/node = SubResource( 38 )
nodes/fragment/16/position = Vector2( 722, 266 )
nodes/fragment/17/node = SubResource( 39 )
nodes/fragment/17/position = Vector2( 1197, 133 )
nodes/fragment/18/node = SubResource( 40 )
nodes/fragment/18/position = Vector2( 1444, -38 )
nodes/fragment/19/node = SubResource( 41 )
nodes/fragment/19/position = Vector2( -456, 95 )
nodes/fragment/20/node = SubResource( 42 )
nodes/fragment/20/position = Vector2( -437, 209 )
nodes/fragment/21/node = SubResource( 47 )
nodes/fragment/21/position = Vector2( 1068.67, 444.75 )
nodes/fragment/22/node = SubResource( 48 )
nodes/fragment/22/position = Vector2( 874, 646 )
nodes/fragment/connections = PoolIntArray( 5, 0, 6, 0, 5, 0, 4, 1, 6, 0, 4, 0, 11, 0, 0, 5, 12, 0, 11, 1, 13, 0, 3, 0, 15, 0, 14, 0, 14, 0, 16, 1, 3, 0, 4, 2, 16, 0, 17, 1, 17, 0, 18, 2, 4, 0, 17, 0, 18, 0, 0, 1, 19, 0, 13, 0, 20, 0, 13, 1, 7, 0, 21, 1, 21, 0, 11, 0, 14, 0, 21, 2, 22, 0, 21, 0 )

[sub_resource type="ShaderMaterial" id=24]
shader = SubResource( 23 )
shader_param/Range = 0.0
shader_param/OffsetX = null
shader_param/OffsetY = null

[sub_resource type="VisualShaderNodeVectorCompose" id=11]

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=13]
operator = 2

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=14]
default_input_values = [ 0, 0.25, 1, 0.3, 2, 0.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=34]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0.5, 0.5 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorScalarMix" id=43]

[sub_resource type="VisualShaderNodeColorConstant" id=44]
constant = Color( 0.157227, 0.875, 0.181059, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=45]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=46]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.5, 2, 0.0 ]

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id=8]
constant = Color( 0.0441221, 0.0790908, 0.555664, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "Alpha"

[sub_resource type="OpenSimplexNoise" id=15]
persistence = 0.1

[sub_resource type="NoiseTexture" id=16]
seamless = true
noise = SubResource( 15 )

[sub_resource type="VisualShaderNodeTexture" id=17]
texture = SubResource( 16 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=18]

[sub_resource type="VisualShaderNodeScalarOp" id=19]

[sub_resource type="VisualShader" id=6]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform float Alpha;
uniform sampler2D tex_frg_7;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:6
	float n_out6p0 = Alpha;

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorDecompose:8
	float n_out8p0 = n_out2p0.x;
	float n_out8p1 = n_out2p0.y;
	float n_out8p2 = n_out2p0.z;

// ScalarOp:5
	float n_out5p0 = n_out6p0 * n_out8p1;

// Input:11
	float n_out11p0 = TIME;

// ScalarOp:9
	float n_out9p0 = n_out8p1 + n_out11p0;

// VectorCompose:10
	float n_in10p2 = 0.00000;
	vec3 n_out10p0 = vec3(n_out8p0, n_out9p0, n_in10p2);

// VectorOp:14
	vec3 n_in14p1 = vec3(1.00000, 0.50000, 0.50000);
	vec3 n_out14p0 = n_out10p0 * n_in14p1;

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out14p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// ScalarOp:12
	float n_out12p0 = n_out5p0 * dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarSmoothStep:13
	float n_in13p0 = 0.25000;
	float n_in13p1 = 0.30000;
	float n_out13p0 = smoothstep(n_in13p0, n_in13p1, n_out12p0);

// ScalarSmoothStep:19
	float n_in19p0 = 1.00000;
	float n_in19p1 = 0.50000;
	float n_out19p0 = smoothstep(n_in19p0, n_in19p1, n_out8p1);

// ScalarOp:17
	float n_out17p0 = n_out13p0 * n_out19p0;

// Color:16
	vec3 n_out16p0 = vec3(0.157227, 0.875000, 0.181059);
	float n_out16p1 = 1.000000;

// Color:4
	vec3 n_out4p0 = vec3(0.044122, 0.079091, 0.555664);
	float n_out4p1 = 1.000000;

// VectorScalarMix:15
	vec3 n_out15p0 = mix(n_out16p0, n_out4p0, n_out8p1);

// Output:0
	ALPHA = n_out17p0;
	EMISSION = n_out15p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -99.3275, 74.75 )
modes/cull = 2
nodes/fragment/0/position = Vector2( 798, 209 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( -855, 152 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( -171, 722 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( -266, 76 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( -494, 19 )
nodes/fragment/7/node = SubResource( 17 )
nodes/fragment/7/position = Vector2( -133, 285 )
nodes/fragment/8/node = SubResource( 18 )
nodes/fragment/8/position = Vector2( -722, 304 )
nodes/fragment/9/node = SubResource( 19 )
nodes/fragment/9/position = Vector2( -608, 437 )
nodes/fragment/10/node = SubResource( 11 )
nodes/fragment/10/position = Vector2( -399, 304 )
nodes/fragment/11/node = SubResource( 12 )
nodes/fragment/11/position = Vector2( -874, 532 )
nodes/fragment/12/node = SubResource( 13 )
nodes/fragment/12/position = Vector2( 57, 152 )
nodes/fragment/13/node = SubResource( 14 )
nodes/fragment/13/position = Vector2( 285, 95 )
nodes/fragment/14/node = SubResource( 34 )
nodes/fragment/14/position = Vector2( -399, 475 )
nodes/fragment/15/node = SubResource( 43 )
nodes/fragment/15/position = Vector2( 190, 456 )
nodes/fragment/16/node = SubResource( 44 )
nodes/fragment/16/position = Vector2( -171, 627 )
nodes/fragment/17/node = SubResource( 45 )
nodes/fragment/17/position = Vector2( 551, 171 )
nodes/fragment/19/node = SubResource( 46 )
nodes/fragment/19/position = Vector2( 209, 247 )
nodes/fragment/connections = PoolIntArray( 6, 0, 5, 0, 2, 0, 8, 0, 9, 0, 10, 1, 8, 1, 9, 0, 11, 0, 9, 1, 5, 0, 12, 0, 7, 0, 12, 1, 12, 0, 13, 2, 10, 0, 14, 0, 14, 0, 7, 0, 8, 0, 10, 0, 15, 0, 0, 5, 8, 1, 15, 2, 8, 1, 5, 1, 4, 0, 15, 1, 16, 0, 15, 0, 13, 0, 17, 0, 17, 0, 0, 1, 8, 1, 19, 2, 19, 0, 17, 1 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/Alpha = 1.0

[sub_resource type="Animation" id=2]
resource_name = "Idle"
length = 0.6
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath("impact:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.05, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 1, 0.2, 1 ), Vector3( 1, 4, 1 ), Vector3( 4, 1, 4 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("impact:material_override:shader_param/Alpha")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.4, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("impact_top:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.1, 0.25, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0.1, 0.1, 0.1 ), Vector3( 1, 4, 1 ), Vector3( 2, 1, 2 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("impact_top:material_override:shader_param/Range")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0.25, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("impact:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("impact:material_override:shader_param/Alpha")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("impact_top:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0.4, 0.4, 0.4 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("impact_top:material_override:shader_param/Range")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[node name="Spatial" type="Spatial"]
script = ExtResource( 2 )

[node name="impact_top" type="MeshInstance" parent="."]
transform = Transform( 0.4, 0, 0, 0, 0.4, 0, 0, 0, 0.4, 0, 0, 0 )
material_override = SubResource( 24 )
mesh = ExtResource( 3 )
material/0 = null

[node name="impact" type="MeshInstance" parent="."]
material_override = SubResource( 7 )
mesh = ExtResource( 1 )
material/0 = null

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Idle = SubResource( 2 )
anims/RESET = SubResource( 3 )

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
