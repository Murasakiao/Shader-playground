[gd_scene load_steps=99 format=2]

[ext_resource path="res://HDRI/dikhololo_night_1k.hdr" type="Texture" id=1]
[ext_resource path="res://Meshs/tube.obj" type="ArrayMesh" id=2]
[ext_resource path="res://Shaders/Path.gd" type="Script" id=3]
[ext_resource path="res://Shaders/Laser.gd" type="Script" id=4]
[ext_resource path="res://Meshs/tube_impact.obj" type="ArrayMesh" id=5]

[sub_resource type="PanoramaSky" id=1]
panorama = ExtResource( 1 )

[sub_resource type="Environment" id=2]
background_mode = 3
background_sky = SubResource( 1 )
background_color = Color( 0.0862745, 0.0862745, 0.0901961, 1 )
background_energy = 0.1
glow_enabled = true
glow_levels/1 = true
glow_levels/2 = true
glow_levels/4 = true
glow_levels/6 = true
glow_levels/7 = true

[sub_resource type="SphereShape" id=3]

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=8]
constant = Color( 0.960731, 0.05254, 0.05254, 1 )

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=9]
default_input_values = [ 0, 0.0, 1, 0.3, 2, 0.0 ]

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="OpenSimplexNoise" id=12]

[sub_resource type="NoiseTexture" id=13]
seamless = true
noise = SubResource( 12 )

[sub_resource type="VisualShaderNodeTexture" id=14]
output_port_for_preview = 0
texture = SubResource( 13 )

[sub_resource type="VisualShaderNodeVectorInterp" id=15]

[sub_resource type="VisualShaderNodeColorConstant" id=16]
constant = Color( 1, 0.736816, 0.234375, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=17]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 3, 3, 3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorScalarSmoothStep" id=18]
output_port_for_preview = 0
default_input_values = [ 0, 0.1, 1, 0.9, 2, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id=20]

[sub_resource type="VisualShaderNodeInput" id=21]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=22]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=23]
constant = Color( 0.960731, 0.05254, 0.05254, 1 )

[sub_resource type="VisualShaderNodeVectorScalarSmoothStep" id=24]
output_port_for_preview = 0
default_input_values = [ 0, 0.1, 1, 0.9, 2, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeTexture" id=25]
output_port_for_preview = 0
texture = SubResource( 13 )

[sub_resource type="VisualShaderNodeVectorInterp" id=26]

[sub_resource type="VisualShaderNodeColorConstant" id=27]
constant = Color( 1, 0.736816, 0.234375, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=28]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 3, 3, 3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=29]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id=30]

[sub_resource type="VisualShaderNodeInput" id=31]
input_name = "view"

[sub_resource type="VisualShaderNodeVectorOp" id=32]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=33]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorCompose" id=34]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=35]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=36]
size = Vector2( 474, 303 )
expression = "output0 = 2.0 + cos(by * 20.0 - time * 20.0);
output0 /= 4.0;
output0 *= sin(by * PI);"

[sub_resource type="VisualShaderNodeInput" id=37]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorDecompose" id=38]

[sub_resource type="VisualShaderNodeInput" id=39]
input_name = "uv"

[sub_resource type="VisualShaderNodeGlobalExpression" id=40]
size = Vector2( 250, 150 )
expression = "const float PI = 3.14159265358979323846;"

[sub_resource type="VisualShader" id=41]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;


// GlobalExpression:0
	const float PI = 3.14159265358979323846;

void vertex() {
// Input:17
	vec3 n_out17p0 = VERTEX;

// Input:25
	float n_out25p0 = TIME;

// Input:27
	vec3 n_out27p0 = vec3(UV, 0.0);

// VectorDecompose:26
	float n_out26p0 = n_out27p0.x;
	float n_out26p1 = n_out27p0.y;
	float n_out26p2 = n_out27p0.z;

// Expression:22
	float n_out22p0;
	n_out22p0 = 0.0;
	{
		n_out22p0 = 2.0 + cos(n_out26p1 * 20.0 - n_out25p0 * 20.0);
		n_out22p0 /= 4.0;
		n_out22p0 *= sin(n_out26p1 * PI);
	}

// VectorCompose:20
	float n_in20p1 = 1.00000;
	vec3 n_out20p0 = vec3(n_out22p0, n_in20p1, n_out22p0);

// VectorOp:21
	vec3 n_out21p0 = n_out17p0 * n_out20p0;

// Output:0
	VERTEX = n_out21p0;

}

void fragment() {
// Input:16
	vec3 n_out16p0 = vec3(UV, 0.0);

// VectorDecompose:17
	float n_out17p0 = n_out16p0.x;
	float n_out17p1 = n_out16p0.y;
	float n_out17p2 = n_out16p0.z;

// ScalarSmoothStep:15
	float n_in15p0 = 0.00000;
	float n_in15p1 = 0.30000;
	float n_out15p0 = smoothstep(n_in15p0, n_in15p1, n_out17p1);

// Color:14
	vec3 n_out14p0 = vec3(0.960731, 0.052540, 0.052540);
	float n_out14p1 = 1.000000;

// Color:5
	vec3 n_out5p0 = vec3(1.000000, 0.736816, 0.234375);
	float n_out5p1 = 1.000000;

// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// Input:12
	float n_out12p0 = TIME;

// ScalarOp:13
	float n_in13p1 = 1.00000;
	float n_out13p0 = n_out12p0 * n_in13p1;

// Input:8
	float n_out8p0 = TIME;

// VectorCompose:9
	float n_in9p2 = 0.00000;
	vec3 n_out9p0 = vec3(n_out13p0, n_out8p0, n_in9p2);

// VectorOp:11
	vec3 n_out11p0 = n_out10p0 - n_out9p0;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out11p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorScalarSmoothStep:7
	float n_in7p0 = 0.10000;
	float n_in7p1 = 0.90000;
	vec3 n_out7p0 = smoothstep(n_in7p0, n_in7p1, n_out2p0);

// VectorMix:3
	vec3 n_out3p0 = mix(n_out14p0, n_out5p0, n_out7p0);

// VectorOp:6
	vec3 n_in6p1 = vec3(3.00000, 3.00000, 3.00000);
	vec3 n_out6p0 = n_out3p0 * n_in6p1;

// Output:0
	ALPHA = n_out15p0;
	EMISSION = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 195, -49 )
nodes/vertex/0/position = Vector2( 600, -20 )
nodes/vertex/17/node = SubResource( 33 )
nodes/vertex/17/position = Vector2( 140, -40 )
nodes/vertex/20/node = SubResource( 34 )
nodes/vertex/20/position = Vector2( 120, 80 )
nodes/vertex/21/node = SubResource( 35 )
nodes/vertex/21/position = Vector2( 318.2, 30.65 )
nodes/vertex/22/node = SubResource( 36 )
nodes/vertex/22/position = Vector2( -420, 0 )
nodes/vertex/22/size = Vector2( 474, 303 )
nodes/vertex/22/input_ports = "0,0,time;1,0,by;"
nodes/vertex/22/output_ports = "0,0,output0;"
nodes/vertex/22/expression = "output0 = 2.0 + cos(by * 20.0 - time * 20.0);
output0 /= 4.0;
output0 *= sin(by * PI);"
nodes/vertex/25/node = SubResource( 37 )
nodes/vertex/25/position = Vector2( -700, 20 )
nodes/vertex/26/node = SubResource( 38 )
nodes/vertex/26/position = Vector2( -760, 220 )
nodes/vertex/27/node = SubResource( 39 )
nodes/vertex/27/position = Vector2( -980, 260 )
nodes/vertex/28/node = SubResource( 40 )
nodes/vertex/28/position = Vector2( -777.856, 473 )
nodes/vertex/28/size = Vector2( 250, 150 )
nodes/vertex/28/input_ports = ""
nodes/vertex/28/output_ports = ""
nodes/vertex/28/expression = "const float PI = 3.14159265358979323846;"
nodes/vertex/connections = PoolIntArray( 20, 0, 21, 1, 17, 0, 21, 0, 22, 0, 20, 0, 27, 0, 26, 0, 22, 0, 20, 2, 21, 0, 0, 0, 25, 0, 22, 0, 26, 1, 22, 1 )
nodes/fragment/0/position = Vector2( 840, 80 )
nodes/fragment/2/node = SubResource( 14 )
nodes/fragment/2/position = Vector2( -700, 200 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( 0, 140 )
nodes/fragment/5/node = SubResource( 16 )
nodes/fragment/5/position = Vector2( -320, 220 )
nodes/fragment/6/node = SubResource( 17 )
nodes/fragment/6/position = Vector2( 180, 140 )
nodes/fragment/7/node = SubResource( 18 )
nodes/fragment/7/position = Vector2( -440, 320 )
nodes/fragment/8/node = SubResource( 19 )
nodes/fragment/8/position = Vector2( -1520, 440 )
nodes/fragment/9/node = SubResource( 20 )
nodes/fragment/9/position = Vector2( -1140, 340 )
nodes/fragment/10/node = SubResource( 4 )
nodes/fragment/10/position = Vector2( -1140, 220 )
nodes/fragment/11/node = SubResource( 5 )
nodes/fragment/11/position = Vector2( -914, 280 )
nodes/fragment/12/node = SubResource( 6 )
nodes/fragment/12/position = Vector2( -1580, 320 )
nodes/fragment/13/node = SubResource( 7 )
nodes/fragment/13/position = Vector2( -1340, 300 )
nodes/fragment/14/node = SubResource( 8 )
nodes/fragment/14/position = Vector2( -260, 120 )
nodes/fragment/15/node = SubResource( 9 )
nodes/fragment/15/position = Vector2( 501.144, 31 )
nodes/fragment/16/node = SubResource( 10 )
nodes/fragment/16/position = Vector2( 120, 20 )
nodes/fragment/17/node = SubResource( 11 )
nodes/fragment/17/position = Vector2( 280, 20 )
nodes/fragment/connections = PoolIntArray( 5, 0, 3, 1, 2, 0, 7, 2, 7, 0, 3, 2, 10, 0, 11, 0, 9, 0, 11, 1, 11, 0, 2, 0, 8, 0, 9, 1, 12, 0, 13, 0, 13, 0, 9, 0, 3, 0, 6, 0, 14, 0, 3, 0, 6, 0, 0, 5, 15, 0, 0, 1, 16, 0, 17, 0, 17, 1, 15, 2 )
nodes/light/2/node = SubResource( 25 )
nodes/light/2/position = Vector2( -1000, 60 )
nodes/light/3/node = SubResource( 26 )
nodes/light/3/position = Vector2( -300, 0 )
nodes/light/4/node = SubResource( 27 )
nodes/light/4/position = Vector2( -620, 80 )
nodes/light/5/node = SubResource( 28 )
nodes/light/5/position = Vector2( -120, 0 )
nodes/light/6/node = SubResource( 29 )
nodes/light/6/position = Vector2( -1820, 300 )
nodes/light/7/node = SubResource( 30 )
nodes/light/7/position = Vector2( -1440, 200 )
nodes/light/8/node = SubResource( 31 )
nodes/light/8/position = Vector2( -1440, 80 )
nodes/light/9/node = SubResource( 32 )
nodes/light/9/position = Vector2( -1220, 140 )
nodes/light/10/node = SubResource( 21 )
nodes/light/10/position = Vector2( -1880, 180 )
nodes/light/11/node = SubResource( 22 )
nodes/light/11/position = Vector2( -1640, 160 )
nodes/light/12/node = SubResource( 23 )
nodes/light/12/position = Vector2( -560, -20 )
nodes/light/13/node = SubResource( 24 )
nodes/light/13/position = Vector2( -660, 280 )
nodes/light/connections = PoolIntArray( 4, 0, 3, 1, 2, 0, 13, 2, 13, 0, 3, 2, 7, 0, 9, 1, 9, 0, 2, 0, 6, 0, 7, 1, 10, 0, 11, 0, 11, 0, 7, 0, 12, 0, 3, 0, 3, 0, 5, 0 )

[sub_resource type="ShaderMaterial" id=42]
shader = SubResource( 41 )

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=43]
default_input_values = [ 0, 0.48, 1, 0.52, 2, 0.0 ]

[sub_resource type="VisualShaderNodeColorConstant" id=44]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=45]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorScalarMix" id=46]

[sub_resource type="VisualShaderNodeColorConstant" id=47]
constant = Color( 0.964844, 0.413346, 0.0480685, 1 )

[sub_resource type="VisualShaderNodeInput" id=48]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=49]

[sub_resource type="VisualShaderNodeScalarOp" id=50]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=51]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=52]

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=53]
default_input_values = [ 0, 0.0, 1, 0.3, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=54]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=55]
size = Vector2( 734, 299 )
expression = "output0 = 2.0 + cos(by * 10.0 - time * 30.0);
output0 /= 2.0;

output0 *= sin(by * PI);"

[sub_resource type="VisualShaderNodeInput" id=56]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=57]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=58]

[sub_resource type="VisualShaderNodeGlobalExpression" id=59]
size = Vector2( 251, 144 )
expression = "const float PI = 3.14159265358979323846;"

[sub_resource type="VisualShaderNodeInput" id=60]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=61]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=62]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShader" id=63]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform sampler2D tex_frg_2;


// GlobalExpression:0
	const float PI = 3.14159265358979323846;

void vertex() {
// Input:3
	vec3 n_out3p0 = VERTEX;

// Input:14
	float n_out14p0 = TIME;

// Input:15
	vec3 n_out15p0 = vec3(UV, 0.0);

// VectorDecompose:16
	float n_out16p0 = n_out15p0.x;
	float n_out16p1 = n_out15p0.y;
	float n_out16p2 = n_out15p0.z;

// Expression:13
	float n_out13p0;
	n_out13p0 = 0.0;
	{
		n_out13p0 = 2.0 + cos(n_out16p1 * 10.0 - n_out14p0 * 30.0);
		n_out13p0 /= 2.0;
		
		n_out13p0 *= sin(n_out16p1 * PI);
	}

// VectorCompose:7
	float n_in7p1 = 1.00000;
	vec3 n_out7p0 = vec3(n_out13p0, n_in7p1, n_out13p0);

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * n_out7p0;

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// Input:22
	vec3 n_out22p0 = vec3(UV, 0.0);

// VectorDecompose:23
	float n_out23p0 = n_out22p0.x;
	float n_out23p1 = n_out22p0.y;
	float n_out23p2 = n_out22p0.z;

// ScalarSmoothStep:24
	float n_in24p0 = 0.00000;
	float n_in24p1 = 0.30000;
	float n_out24p0 = smoothstep(n_in24p0, n_in24p1, n_out23p1);

// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// Input:12
	float n_out12p0 = TIME;

// ScalarOp:13
	float n_in13p1 = 1.00000;
	float n_out13p0 = n_out12p0 * n_in13p1;

// Input:8
	float n_out8p0 = TIME;

// ScalarOp:21
	float n_in21p1 = 2.00000;
	float n_out21p0 = n_out8p0 * n_in21p1;

// VectorCompose:9
	float n_in9p2 = 0.00000;
	vec3 n_out9p0 = vec3(n_out13p0, n_out21p0, n_in9p2);

// VectorOp:11
	vec3 n_out11p0 = n_out10p0 - n_out9p0;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out11p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarSmoothStep:14
	float n_in14p0 = 0.48000;
	float n_in14p1 = 0.52000;
	float n_out14p0 = smoothstep(n_in14p0, n_in14p1, dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)));

// ScalarOp:25
	float n_out25p0 = n_out24p0 * n_out14p0;

// Color:18
	vec3 n_out18p0 = vec3(0.964844, 0.413346, 0.048069);
	float n_out18p1 = 1.000000;

// Color:15
	vec3 n_out15p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out15p1 = 1.000000;

// Input:19
	vec3 n_out19p0 = vec3(UV, 0.0);

// VectorDecompose:20
	float n_out20p0 = n_out19p0.x;
	float n_out20p1 = n_out19p0.y;
	float n_out20p2 = n_out19p0.z;

// VectorScalarMix:17
	vec3 n_out17p0 = mix(n_out18p0, n_out15p0, n_out20p1);

// VectorOp:16
	vec3 n_in16p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out16p0 = n_out17p0 * n_in16p1;

// Output:0
	ALPHA = n_out25p0;
	EMISSION = n_out16p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 195, -49 )
modes/cull = 2
nodes/vertex/0/position = Vector2( 940, 140 )
nodes/vertex/3/node = SubResource( 60 )
nodes/vertex/3/position = Vector2( 80, 160 )
nodes/vertex/4/node = SubResource( 61 )
nodes/vertex/4/position = Vector2( 300, 160 )
nodes/vertex/7/node = SubResource( 62 )
nodes/vertex/7/position = Vector2( 20, 280 )
nodes/vertex/13/node = SubResource( 55 )
nodes/vertex/13/position = Vector2( -760, 220 )
nodes/vertex/13/size = Vector2( 734, 299 )
nodes/vertex/13/input_ports = "0,0,time;1,0,by;"
nodes/vertex/13/output_ports = "0,0,output0;"
nodes/vertex/13/expression = "output0 = 2.0 + cos(by * 10.0 - time * 30.0);
output0 /= 2.0;

output0 *= sin(by * PI);"
nodes/vertex/14/node = SubResource( 56 )
nodes/vertex/14/position = Vector2( -901.704, 151.113 )
nodes/vertex/15/node = SubResource( 57 )
nodes/vertex/15/position = Vector2( -1200, 300 )
nodes/vertex/16/node = SubResource( 58 )
nodes/vertex/16/position = Vector2( -1040, 260 )
nodes/vertex/17/node = SubResource( 59 )
nodes/vertex/17/position = Vector2( -1015.86, 660 )
nodes/vertex/17/size = Vector2( 251, 144 )
nodes/vertex/17/input_ports = ""
nodes/vertex/17/output_ports = ""
nodes/vertex/17/expression = "const float PI = 3.14159265358979323846;"
nodes/vertex/connections = PoolIntArray( 3, 0, 4, 0, 13, 0, 7, 0, 13, 0, 7, 2, 15, 0, 16, 0, 14, 0, 13, 0, 7, 0, 4, 1, 4, 0, 0, 0, 16, 1, 13, 1 )
nodes/fragment/0/position = Vector2( 1220, 120 )
nodes/fragment/2/node = SubResource( 14 )
nodes/fragment/2/position = Vector2( -700, 200 )
nodes/fragment/8/node = SubResource( 19 )
nodes/fragment/8/position = Vector2( -1620, 440 )
nodes/fragment/9/node = SubResource( 20 )
nodes/fragment/9/position = Vector2( -1140, 340 )
nodes/fragment/10/node = SubResource( 4 )
nodes/fragment/10/position = Vector2( -1140, 220 )
nodes/fragment/11/node = SubResource( 5 )
nodes/fragment/11/position = Vector2( -914, 280 )
nodes/fragment/12/node = SubResource( 6 )
nodes/fragment/12/position = Vector2( -1580, 320 )
nodes/fragment/13/node = SubResource( 7 )
nodes/fragment/13/position = Vector2( -1340, 300 )
nodes/fragment/14/node = SubResource( 43 )
nodes/fragment/14/position = Vector2( -180, 320 )
nodes/fragment/15/node = SubResource( 44 )
nodes/fragment/15/position = Vector2( -140, 200 )
nodes/fragment/16/node = SubResource( 45 )
nodes/fragment/16/position = Vector2( 300, 120 )
nodes/fragment/17/node = SubResource( 46 )
nodes/fragment/17/position = Vector2( 80, 120 )
nodes/fragment/18/node = SubResource( 47 )
nodes/fragment/18/position = Vector2( -160, 120 )
nodes/fragment/19/node = SubResource( 48 )
nodes/fragment/19/position = Vector2( -380, 0 )
nodes/fragment/20/node = SubResource( 49 )
nodes/fragment/20/position = Vector2( -200, 0 )
nodes/fragment/21/node = SubResource( 50 )
nodes/fragment/21/position = Vector2( -1340, 460 )
nodes/fragment/22/node = SubResource( 51 )
nodes/fragment/22/position = Vector2( 400, 0 )
nodes/fragment/23/node = SubResource( 52 )
nodes/fragment/23/position = Vector2( 560, 0 )
nodes/fragment/24/node = SubResource( 53 )
nodes/fragment/24/position = Vector2( 760, 0 )
nodes/fragment/25/node = SubResource( 54 )
nodes/fragment/25/position = Vector2( 980, 200 )
nodes/fragment/connections = PoolIntArray( 10, 0, 11, 0, 9, 0, 11, 1, 11, 0, 2, 0, 12, 0, 13, 0, 13, 0, 9, 0, 2, 0, 14, 2, 15, 0, 17, 1, 18, 0, 17, 0, 17, 0, 16, 0, 19, 0, 20, 0, 16, 0, 0, 5, 8, 0, 21, 0, 21, 0, 9, 1, 20, 1, 17, 2, 22, 0, 23, 0, 23, 1, 24, 2, 14, 0, 25, 1, 25, 0, 0, 1, 24, 0, 25, 0 )
nodes/light/0/position = Vector2( 360, 140 )

[sub_resource type="ShaderMaterial" id=64]
shader = SubResource( 63 )

[sub_resource type="VisualShaderNodeScalarOp" id=65]

[sub_resource type="VisualShaderNodeScalarOp" id=66]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=67]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=68]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=69]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=70]
default_input_values = [ 0, 0.5, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=71]
output_port_for_preview = 0
default_input_values = [ 0, 0.2, 1, 0.5, 2, 0.0 ]

[sub_resource type="OpenSimplexNoise" id=72]
seed = 4
period = 43.0

[sub_resource type="NoiseTexture" id=73]
seamless = true
noise = SubResource( 72 )

[sub_resource type="VisualShaderNodeTexture" id=74]
texture = SubResource( 73 )

[sub_resource type="VisualShaderNodeInput" id=75]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=76]

[sub_resource type="VisualShaderNodeColorConstant" id=77]
constant = Color( 1, 0.759674, 0.121094, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=78]
constant = Color( 0.0588235, 0.470588, 1, 1 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=79]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorCompose" id=80]

[sub_resource type="VisualShaderNodeInput" id=81]
input_name = "time"

[sub_resource type="VisualShader" id=82]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform sampler2D tex_frg_18;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorDecompose:3
	float n_out3p0 = n_out2p0.x;
	float n_out3p1 = n_out2p0.y;
	float n_out3p2 = n_out2p0.z;

// Input:9
	float n_out9p0 = TIME;

// ScalarOp:12
	float n_in12p1 = 10.00000;
	float n_out12p0 = n_out9p0 * n_in12p1;

// ScalarOp:10
	float n_out10p0 = n_out3p1 + n_out12p0;

// ScalarOp:11
	float n_in11p1 = 0.10000;
	float n_out11p0 = n_out10p0 * n_in11p1;

// VectorCompose:8
	float n_in8p2 = 0.00000;
	vec3 n_out8p0 = vec3(n_out3p0, n_out11p0, n_in8p2);

// Texture:18
	vec4 tex_frg_18_read = texture(tex_frg_18, n_out8p0.xy);
	vec3 n_out18p0 = tex_frg_18_read.rgb;
	float n_out18p1 = tex_frg_18_read.a;

// ScalarOp:13
	float n_out13p0 = dot(n_out18p0, vec3(0.333333, 0.333333, 0.333333)) * n_out3p1;

// ScalarSmoothStep:17
	float n_in17p0 = 0.20000;
	float n_in17p1 = 0.50000;
	float n_out17p0 = smoothstep(n_in17p0, n_in17p1, n_out13p0);

// Color:5
	vec3 n_out5p0 = vec3(0.058823, 0.470588, 1.000000);
	float n_out5p1 = 1.000000;

// Color:4
	vec3 n_out4p0 = vec3(1.000000, 0.759674, 0.121094);
	float n_out4p1 = 1.000000;

// ScalarSmoothStep:16
	float n_in16p0 = 0.50000;
	float n_in16p1 = 1.00000;
	float n_out16p0 = smoothstep(n_in16p0, n_in16p1, n_out3p1);

// VectorScalarMix:6
	vec3 n_out6p0 = mix(n_out5p0, n_out4p0, n_out16p0);

// VectorOp:15
	vec3 n_in15p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out15p0 = n_out6p0 * n_in15p1;

// Output:0
	ALPHA = n_out17p0;
	EMISSION = n_out15p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -945, 105 )
modes/cull = 2
nodes/fragment/0/position = Vector2( 560, 160 )
nodes/fragment/2/node = SubResource( 75 )
nodes/fragment/2/position = Vector2( -1160, 140 )
nodes/fragment/3/node = SubResource( 76 )
nodes/fragment/3/position = Vector2( -920, 140 )
nodes/fragment/4/node = SubResource( 77 )
nodes/fragment/4/position = Vector2( -200, 500 )
nodes/fragment/5/node = SubResource( 78 )
nodes/fragment/5/position = Vector2( -200, 400 )
nodes/fragment/6/node = SubResource( 79 )
nodes/fragment/6/position = Vector2( 60, 420 )
nodes/fragment/8/node = SubResource( 80 )
nodes/fragment/8/position = Vector2( -320, 180 )
nodes/fragment/9/node = SubResource( 81 )
nodes/fragment/9/position = Vector2( -1040, 300 )
nodes/fragment/10/node = SubResource( 65 )
nodes/fragment/10/position = Vector2( -640, 180 )
nodes/fragment/11/node = SubResource( 66 )
nodes/fragment/11/position = Vector2( -520, 320 )
nodes/fragment/12/node = SubResource( 67 )
nodes/fragment/12/position = Vector2( -840, 280 )
nodes/fragment/13/node = SubResource( 68 )
nodes/fragment/13/position = Vector2( 100, 160 )
nodes/fragment/15/node = SubResource( 69 )
nodes/fragment/15/position = Vector2( 380, 340 )
nodes/fragment/16/node = SubResource( 70 )
nodes/fragment/16/position = Vector2( -380, 520 )
nodes/fragment/17/node = SubResource( 71 )
nodes/fragment/17/position = Vector2( 340, 180 )
nodes/fragment/18/node = SubResource( 74 )
nodes/fragment/18/position = Vector2( -120, 120 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 6, 1, 5, 0, 6, 0, 3, 0, 8, 0, 3, 1, 10, 0, 10, 0, 11, 0, 11, 0, 8, 1, 9, 0, 12, 0, 12, 0, 10, 1, 3, 1, 13, 1, 6, 0, 15, 0, 15, 0, 0, 5, 3, 1, 16, 2, 16, 0, 6, 2, 13, 0, 17, 2, 17, 0, 0, 1, 8, 0, 18, 0, 18, 0, 13, 0 )

[sub_resource type="ShaderMaterial" id=83]
shader = SubResource( 82 )

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=84]
output_port_for_preview = 0
default_input_values = [ 0, 0.2, 1, 0.8, 2, 0.0 ]

[sub_resource type="VisualShaderNodeColorConstant" id=85]
constant = Color( 1, 0.26651, 0.0117188, 1 )

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=86]
default_input_values = [ 0, 0.5, 1, 0.6, 2, 0.0 ]

[sub_resource type="OpenSimplexNoise" id=87]
seed = 5

[sub_resource type="NoiseTexture" id=88]
seamless = true
noise = SubResource( 87 )

[sub_resource type="VisualShaderNodeTexture" id=89]
output_port_for_preview = 0
texture = SubResource( 88 )

[sub_resource type="VisualShader" id=90]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform sampler2D tex_frg_7;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorDecompose:3
	float n_out3p0 = n_out2p0.x;
	float n_out3p1 = n_out2p0.y;
	float n_out3p2 = n_out2p0.z;

// Input:9
	float n_out9p0 = TIME;

// ScalarOp:12
	float n_in12p1 = 10.00000;
	float n_out12p0 = n_out9p0 * n_in12p1;

// ScalarOp:10
	float n_out10p0 = n_out3p1 + n_out12p0;

// ScalarOp:11
	float n_in11p1 = 0.10000;
	float n_out11p0 = n_out10p0 * n_in11p1;

// VectorCompose:8
	float n_in8p2 = 0.00000;
	vec3 n_out8p0 = vec3(n_out3p0, n_out11p0, n_in8p2);

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out8p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// ScalarSmoothStep:18
	float n_in18p0 = 0.50000;
	float n_in18p1 = 0.60000;
	float n_out18p0 = smoothstep(n_in18p0, n_in18p1, dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333)));

// ScalarOp:13
	float n_out13p0 = n_out18p0 * n_out3p1;

// ScalarSmoothStep:14
	float n_in14p0 = 0.20000;
	float n_in14p1 = 0.80000;
	float n_out14p0 = smoothstep(n_in14p0, n_in14p1, n_out13p0);

// Color:17
	vec3 n_out17p0 = vec3(1.000000, 0.266510, 0.011719);
	float n_out17p1 = 1.000000;

// Color:4
	vec3 n_out4p0 = vec3(1.000000, 0.759674, 0.121094);
	float n_out4p1 = 1.000000;

// ScalarSmoothStep:16
	float n_in16p0 = 0.50000;
	float n_in16p1 = 1.00000;
	float n_out16p0 = smoothstep(n_in16p0, n_in16p1, n_out3p1);

// VectorScalarMix:6
	vec3 n_out6p0 = mix(n_out17p0, n_out4p0, n_out16p0);

// VectorOp:15
	vec3 n_in15p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out15p0 = n_out6p0 * n_in15p1;

// Output:0
	ALPHA = n_out14p0;
	EMISSION = n_out15p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -945, 105 )
modes/cull = 2
nodes/fragment/0/position = Vector2( 840, 160 )
nodes/fragment/2/node = SubResource( 75 )
nodes/fragment/2/position = Vector2( -1160, 140 )
nodes/fragment/3/node = SubResource( 76 )
nodes/fragment/3/position = Vector2( -920, 140 )
nodes/fragment/4/node = SubResource( 77 )
nodes/fragment/4/position = Vector2( -200, 500 )
nodes/fragment/6/node = SubResource( 79 )
nodes/fragment/6/position = Vector2( 60, 420 )
nodes/fragment/7/node = SubResource( 89 )
nodes/fragment/7/position = Vector2( -80, 80 )
nodes/fragment/8/node = SubResource( 80 )
nodes/fragment/8/position = Vector2( -320, 180 )
nodes/fragment/9/node = SubResource( 81 )
nodes/fragment/9/position = Vector2( -1040, 300 )
nodes/fragment/10/node = SubResource( 65 )
nodes/fragment/10/position = Vector2( -640, 180 )
nodes/fragment/11/node = SubResource( 66 )
nodes/fragment/11/position = Vector2( -520, 320 )
nodes/fragment/12/node = SubResource( 67 )
nodes/fragment/12/position = Vector2( -840, 280 )
nodes/fragment/13/node = SubResource( 68 )
nodes/fragment/13/position = Vector2( 340, 180 )
nodes/fragment/14/node = SubResource( 84 )
nodes/fragment/14/position = Vector2( 580, 140 )
nodes/fragment/15/node = SubResource( 69 )
nodes/fragment/15/position = Vector2( 380, 340 )
nodes/fragment/16/node = SubResource( 70 )
nodes/fragment/16/position = Vector2( -380, 520 )
nodes/fragment/17/node = SubResource( 85 )
nodes/fragment/17/position = Vector2( -260, 380 )
nodes/fragment/18/node = SubResource( 86 )
nodes/fragment/18/position = Vector2( 100, 120 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 6, 1, 3, 0, 8, 0, 8, 0, 7, 0, 3, 1, 10, 0, 10, 0, 11, 0, 11, 0, 8, 1, 9, 0, 12, 0, 12, 0, 10, 1, 3, 1, 13, 1, 13, 0, 14, 2, 14, 0, 0, 1, 6, 0, 15, 0, 15, 0, 0, 5, 3, 1, 16, 2, 16, 0, 6, 2, 17, 0, 6, 0, 7, 0, 18, 2, 18, 0, 13, 0 )

[sub_resource type="ShaderMaterial" id=91]
shader = SubResource( 90 )

[sub_resource type="Curve3D" id=92]
_data = {
"points": PoolVector3Array( -1.04407, 0, -0.259009, 1.04407, 0, 0.259009, -0.545474, 0, 1.71847, 0.477469, 0, 0.855466, -0.477469, 0, -0.855466, 1.46096, 0, 0.29231, 0.322023, 0, 0.34446, -0.322023, 0, -0.34446, -0.91684, 0, 0.55795, -0.779731, 0, 0.384, 0.779731, 0, -0.384, -0.412844, 0, -1.11982, -0.075868, 0, 0.941297, 0.075868, 0, -0.941297, 1.70632, 0, -1.1401, 0.60639, 0, -1.00761, -0.60639, 0, 1.00761, -1.73746, 0.00156498, -0.965076, -1.04407, 0, -0.259009, 1.04407, 0, 0.259009, -0.545474, 0, 1.71847 ),
"tilts": PoolRealArray( 0, 0, 0, 0, 0, 0, 0 )
}

[sub_resource type="BoxShape" id=93]
extents = Vector3( 4, 0.1, 4 )

[node name="Spatial" type="Spatial"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 2 )

[node name="StaticBody2" type="StaticBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1.71046 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape" type="CollisionShape" parent="StaticBody2"]
shape = SubResource( 3 )

[node name="CSGSphere" type="CSGSphere" parent="StaticBody2"]
radial_segments = 32
rings = 16

[node name="StaticBody3" type="StaticBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -2.04382, -0.605482, 0.0525701 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape" type="CollisionShape" parent="StaticBody3"]
shape = SubResource( 3 )

[node name="CSGSphere" type="CSGSphere" parent="StaticBody3"]
radial_segments = 32
rings = 16

[node name="StaticBody4" type="StaticBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.93281, -0.421783, -0.29758 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape" type="CollisionShape" parent="StaticBody4"]
shape = SubResource( 3 )

[node name="CSGSphere" type="CSGSphere" parent="StaticBody4"]
radial_segments = 32
rings = 16

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.812725, -0.101176, 0.573796, 0, 0.984808, 0.173648, -0.582648, -0.141128, 0.800378, 1.72989, 0.950663, 2.09216 )
fov = 50.0

[node name="Laser" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.670949, 1.28934, 0.401854 )
script = ExtResource( 4 )
target_path = NodePath("../Path/PathFollow")

[node name="RayCast" type="RayCast" parent="Laser"]
enabled = true

[node name="Body" type="Spatial" parent="Laser"]

[node name="Container" type="Spatial" parent="Laser/Body"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )

[node name="Inner" type="MeshInstance" parent="Laser/Body/Container"]
cast_shadow = 0
mesh = ExtResource( 2 )
material/0 = SubResource( 42 )

[node name="Outer" type="MeshInstance" parent="Laser/Body/Container"]
cast_shadow = 0
mesh = ExtResource( 2 )
material/0 = SubResource( 64 )

[node name="light" type="OmniLight" parent="Laser"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.08736, 0 )
light_color = Color( 1, 0.419608, 0.137255, 1 )
shadow_enabled = true
omni_range = 2.6
omni_attenuation = 10.0

[node name="Impact" type="Spatial" parent="Laser"]

[node name="Container" type="Spatial" parent="Laser/Impact"]
transform = Transform( 0.6, 0, 0, 0, -4.37114e-08, 0.6, 0, -1, -2.62268e-08, 0, 0, 0 )

[node name="tube_impact" type="MeshInstance" parent="Laser/Impact/Container"]
material_override = SubResource( 83 )
mesh = ExtResource( 5 )
material/0 = null

[node name="tube_impact2" type="MeshInstance" parent="Laser/Impact/Container"]
transform = Transform( 1, 0, 0, 0, 1.5, 0, 0, 0, 1, 0, 0.02739, 0 )
material_override = SubResource( 91 )
mesh = ExtResource( 5 )
material/0 = null

[node name="Path" type="Path" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0928414, -0.943007, -0.0198945 )
curve = SubResource( 92 )
script = ExtResource( 3 )

[node name="PathFollow" type="PathFollow" parent="Path"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.545474, 0, 1.71847 )

[node name="Tween" type="Tween" parent="Path"]

[node name="StaticBody" type="StaticBody" parent="."]

[node name="CollisionShape" type="CollisionShape" parent="StaticBody"]
shape = SubResource( 93 )

[node name="CSGBox" type="CSGBox" parent="StaticBody"]
width = 8.0
height = 0.2
depth = 8.0

[connection signal="tween_all_completed" from="Path/Tween" to="Path" method="_on_Tween_tween_all_completed"]
