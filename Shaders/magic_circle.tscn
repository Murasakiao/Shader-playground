[gd_scene load_steps=148 format=2]

[ext_resource path="res://Textures/Mask.png" type="Texture" id=1]
[ext_resource path="res://Textures/Gradient.png" type="Texture" id=2]
[ext_resource path="res://HDRI/courtyard_1k.hdr" type="Texture" id=3]
[ext_resource path="res://Meshs/ring.obj" type="ArrayMesh" id=4]
[ext_resource path="res://Shaders/magic_circle.gd" type="Script" id=5]
[ext_resource path="res://Box.tscn" type="PackedScene" id=6]
[ext_resource path="res://Meshs/magic_circle_mesh.obj" type="ArrayMesh" id=8]

[sub_resource type="PlaneMesh" id=1]

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=3]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ), 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, -1.0 ]
operator = 1

[sub_resource type="OpenSimplexNoise" id=5]
period = 9.4
persistence = 1.0

[sub_resource type="NoiseTexture" id=6]
seamless = true
noise = SubResource( 5 )

[sub_resource type="VisualShaderNodeTexture" id=7]
output_port_for_preview = 0
texture = SubResource( 6 )

[sub_resource type="VisualShaderNodeColorConstant" id=8]
constant = Color( 0.978317, 0.0699463, 1, 1 )

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = ExtResource( 2 )

[sub_resource type="OpenSimplexNoise" id=10]
period = 256.0
persistence = 0.0

[sub_resource type="NoiseTexture" id=11]
seamless = true
noise = SubResource( 10 )

[sub_resource type="VisualShaderNodeTexture" id=12]
output_port_for_preview = 0
texture = SubResource( 11 )

[sub_resource type="OpenSimplexNoise" id=13]
seed = 10
period = 256.0
persistence = 0.0

[sub_resource type="NoiseTexture" id=14]
seamless = true
noise = SubResource( 13 )

[sub_resource type="VisualShaderNodeTexture" id=15]
output_port_for_preview = 0
texture = SubResource( 14 )

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=17]

[sub_resource type="VisualShaderNodeVectorCompose" id=18]

[sub_resource type="VisualShaderNodeVectorCompose" id=19]

[sub_resource type="VisualShaderNodeScalarOp" id=20]

[sub_resource type="VisualShaderNodeScalarOp" id=21]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=23]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.1, 2, 0.0 ]

[sub_resource type="VisualShaderNodeExpression" id=24]
output_port_for_preview = 0
size = Vector2( 574, 568 )
expression = "float cosa = cos(rotation);
float sina = sin(rotation);
uv -= pivot;
output0 = vec3(
    cosa * uv.x - sina * uv.y,
    cosa * uv.y + sina * uv.x,
	0
) + pivot;"

[sub_resource type="VisualShaderNodeInput" id=25]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id=26]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeInput" id=27]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorClamp" id=28]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=29]
uniform_name = "Drawing"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=30]

[sub_resource type="VisualShaderNodeColorConstant" id=31]
constant = Color( 0.156374, 0, 1, 1 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=32]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, 0.5 ]

[sub_resource type="VisualShaderNodeColorConstant" id=33]
constant = Color( 0.498855, 0.144531, 1, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=34]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=35]
default_input_values = [ 0, 0.5, 1, 0.5, 2, 0.0 ]

[sub_resource type="VisualShaderNodeInput" id=36]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDistance" id=37]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="VisualShaderNodeScalarFunc" id=38]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=39]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=40]

[sub_resource type="VisualShaderNodeScalarOp" id=41]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeInput" id=42]
input_name = "time"

[sub_resource type="OpenSimplexNoise" id=43]

[sub_resource type="NoiseTexture" id=44]
seamless = true
noise = SubResource( 43 )

[sub_resource type="VisualShaderNodeTexture" id=45]
texture = SubResource( 44 )

[sub_resource type="VisualShaderNodeScalarOp" id=46]
output_port_for_preview = 0
operator = 2

[sub_resource type="OpenSimplexNoise" id=47]
seed = 10

[sub_resource type="NoiseTexture" id=48]
seamless = true
noise = SubResource( 47 )

[sub_resource type="VisualShaderNodeTexture" id=49]
texture = SubResource( 48 )

[sub_resource type="VisualShaderNodeInput" id=50]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=51]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=52]

[sub_resource type="VisualShaderNodeVectorDecompose" id=53]

[sub_resource type="VisualShaderNodeVectorCompose" id=54]

[sub_resource type="VisualShaderNodeScalarOp" id=55]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=56]

[sub_resource type="VisualShaderNodeScalarOp" id=57]

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=58]
output_port_for_preview = 0
default_input_values = [ 0, 0.1, 1, 0.2, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=59]
function = 12

[sub_resource type="VisualShaderNodeInput" id=60]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=61]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=62]

[sub_resource type="VisualShaderNodeScalarOp" id=63]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, -1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=64]
operator = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=65]
uniform_name = "Deformation"

[sub_resource type="VisualShaderNodeScalarOp" id=66]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=67]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=68]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 4.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=69]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=70]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=71]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=72]
uniform_name = "Emission"

[sub_resource type="VisualShader" id=73]
code = "shader_type spatial;
render_mode specular_schlick_ggx, ambient_light_disabled;

uniform float Drawing;
uniform sampler2D tex_frg_17;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_61;
uniform sampler2D tex_frg_63;
uniform float Deformation;
uniform sampler2D tex_frg_10;
uniform float Emission;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:39
	float n_out39p0 = Drawing;

// ScalarOp:6
	float n_in6p1 = 0.50000;
	float n_out6p0 = n_out39p0 + n_in6p1;

// Texture:17
	vec4 tex_frg_17_read = texture(tex_frg_17, UV.xy);
	vec3 n_out17p0 = tex_frg_17_read.rgb;
	float n_out17p1 = tex_frg_17_read.a;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarOp:50
	float n_out50p0 = dot(n_out17p0, vec3(0.333333, 0.333333, 0.333333)) * dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarSmoothStep:3
	float n_out3p0 = smoothstep(n_out39p0, n_out6p0, n_out50p0);

// Input:74
	vec3 n_out74p0 = vec3(UV, 0.0);

// Input:64
	vec3 n_out64p0 = vec3(UV, 0.0);

// VectorDecompose:67
	float n_out67p0 = n_out64p0.x;
	float n_out67p1 = n_out64p0.y;
	float n_out67p2 = n_out64p0.z;

// Input:65
	float n_out65p0 = TIME;

// ScalarOp:84
	float n_in84p1 = 0.10000;
	float n_out84p0 = n_out65p0 * n_in84p1;

// ScalarOp:66
	float n_out66p0 = n_out67p0 + n_out84p0;

// VectorCompose:68
	float n_in68p2 = 0.00000;
	vec3 n_out68p0 = vec3(n_out66p0, n_out67p1, n_in68p2);

// Texture:61
	vec4 tex_frg_61_read = texture(tex_frg_61, n_out68p0.xy);
	vec3 n_out61p0 = tex_frg_61_read.rgb;
	float n_out61p1 = tex_frg_61_read.a;

// ScalarOp:71
	float n_out71p0 = n_out67p1 + n_out84p0;

// VectorCompose:70
	float n_in70p2 = 0.00000;
	vec3 n_out70p0 = vec3(n_out67p0, n_out71p0, n_in70p2);

// Texture:63
	vec4 tex_frg_63_read = texture(tex_frg_63, n_out70p0.xy);
	vec3 n_out63p0 = tex_frg_63_read.rgb;
	float n_out63p1 = tex_frg_63_read.a;

// ScalarOp:69
	float n_out69p0 = dot(n_out61p0, vec3(0.333333, 0.333333, 0.333333)) * dot(n_out63p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarUniform:81
	float n_out81p0 = Deformation;

// ScalarOp:78
	float n_out78p0 = n_out69p0 * n_out81p0;

// VectorOp:79
	vec3 n_out79p0 = n_out74p0 + vec3(n_out78p0);

// ScalarOp:85
	float n_in85p1 = 4.00000;
	float n_out85p0 = n_out81p0 / n_in85p1;

// VectorOp:80
	vec3 n_out80p0 = n_out79p0 - vec3(n_out85p0);

// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, n_out80p0.xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// ScalarOp:8
	float n_in8p0 = 1.00000;
	float n_out8p0 = n_in8p0 - dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333));

// VectorScalarMix:11
	vec3 n_in11p0 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out11p0 = mix(n_in11p0, vec3(n_out3p0), n_out8p0);

// ScalarOp:12
	float n_in12p0 = 1.00000;
	float n_out12p0 = n_in12p0 - dot(n_out11p0, vec3(0.333333, 0.333333, 0.333333));

// Color:19
	vec3 n_out19p0 = vec3(0.978317, 0.069946, 1.000000);
	float n_out19p1 = 1.000000;

// Color:42
	vec3 n_out42p0 = vec3(0.156374, 0.000000, 1.000000);
	float n_out42p1 = 1.000000;

// VectorScalarMix:41
	vec3 n_out41p0 = mix(n_out19p0, n_out42p0, n_out3p0);

// Color:46
	vec3 n_out46p0 = vec3(0.498855, 0.144531, 1.000000);
	float n_out46p1 = 1.000000;

// Input:55
	vec3 n_out55p0 = vec3(UV, 0.0);

// VectorCompose:54
	float n_in54p0 = 0.50000;
	float n_in54p1 = 0.50000;
	float n_in54p2 = 0.00000;
	vec3 n_out54p0 = vec3(n_in54p0, n_in54p1, n_in54p2);

// Distance:56
	float n_out56p0 = distance(n_out55p0, n_out54p0);

// Input:60
	float n_out60p0 = TIME;

// ScalarOp:83
	float n_in83p1 = 0.20000;
	float n_out83p0 = n_out60p0 * n_in83p1;

// ScalarOp:59
	float n_out59p0 = n_out56p0 + n_out83p0;

// ScalarOp:58
	float n_in58p1 = 10.00000;
	float n_out58p0 = n_out59p0 * n_in58p1;

// ScalarFunc:57
	float n_out57p0 = sin(n_out58p0);

// ScalarFunc:73
	float n_out73p0 = abs(n_out57p0);

// ScalarOp:62
	float n_out62p0 = n_out73p0 * n_out69p0;

// ScalarSmoothStep:72
	float n_in72p0 = 0.10000;
	float n_in72p1 = 0.20000;
	float n_out72p0 = smoothstep(n_in72p0, n_in72p1, n_out62p0);

// VectorScalarMix:45
	vec3 n_out45p0 = mix(n_out41p0, n_out46p0, n_out72p0);

// ScalarOp:88
	float n_in88p1 = 1.00000;
	float n_out88p0 = n_out72p0 + n_in88p1;

// VectorOp:86
	vec3 n_out86p0 = n_out45p0 * vec3(n_out88p0);

// ScalarUniform:90
	float n_out90p0 = Emission;

// VectorOp:89
	vec3 n_out89p0 = n_out86p0 * vec3(n_out90p0);

// Output:0
	ALPHA = n_out12p0;
	EMISSION = n_out89p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 295.665, 418.391 )
flags/ambient_light_disabled = true
nodes/fragment/0/position = Vector2( 1660, 300 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -720, 420 )
nodes/fragment/3/node = SubResource( 23 )
nodes/fragment/3/position = Vector2( 40, 200 )
nodes/fragment/6/node = SubResource( 41 )
nodes/fragment/6/position = Vector2( -200, 80 )
nodes/fragment/8/node = SubResource( 63 )
nodes/fragment/8/position = Vector2( 220, 600 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( -40, 660 )
nodes/fragment/11/node = SubResource( 3 )
nodes/fragment/11/position = Vector2( 440, 260 )
nodes/fragment/12/node = SubResource( 4 )
nodes/fragment/12/position = Vector2( 640, 240 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( -960, 120 )
nodes/fragment/19/node = SubResource( 8 )
nodes/fragment/19/position = Vector2( 460, 520 )
nodes/fragment/20/node = SubResource( 12 )
nodes/fragment/20/position = Vector2( -3720, 1320 )
nodes/fragment/21/node = SubResource( 15 )
nodes/fragment/21/position = Vector2( -3720, 1660 )
nodes/fragment/22/node = SubResource( 16 )
nodes/fragment/22/position = Vector2( -4340, 1200 )
nodes/fragment/23/node = SubResource( 17 )
nodes/fragment/23/position = Vector2( -4220, 1240 )
nodes/fragment/24/node = SubResource( 18 )
nodes/fragment/24/position = Vector2( -3920, 1440 )
nodes/fragment/25/node = SubResource( 19 )
nodes/fragment/25/position = Vector2( -3920, 1620 )
nodes/fragment/26/node = SubResource( 20 )
nodes/fragment/26/position = Vector2( -4140, 1420 )
nodes/fragment/27/node = SubResource( 21 )
nodes/fragment/27/position = Vector2( -4120, 1620 )
nodes/fragment/28/node = SubResource( 22 )
nodes/fragment/28/position = Vector2( -4300, 1500 )
nodes/fragment/34/node = SubResource( 24 )
nodes/fragment/34/position = Vector2( -3400, 1360 )
nodes/fragment/34/size = Vector2( 574, 568 )
nodes/fragment/34/input_ports = "0,1,uv;1,0,rotation;2,1,pivot;"
nodes/fragment/34/output_ports = "0,1,output0;"
nodes/fragment/34/expression = "float cosa = cos(rotation);
float sina = sin(rotation);
uv -= pivot;
output0 = vec3(
    cosa * uv.x - sina * uv.y,
    cosa * uv.y + sina * uv.x,
	0
) + pivot;"
nodes/fragment/35/node = SubResource( 25 )
nodes/fragment/35/position = Vector2( -3600, 1360 )
nodes/fragment/36/node = SubResource( 26 )
nodes/fragment/36/position = Vector2( -3860, 1620 )
nodes/fragment/37/node = SubResource( 27 )
nodes/fragment/37/position = Vector2( -3720, 1500 )
nodes/fragment/38/node = SubResource( 28 )
nodes/fragment/38/position = Vector2( -2780, 1380 )
nodes/fragment/39/node = SubResource( 29 )
nodes/fragment/39/position = Vector2( -500, 140 )
nodes/fragment/41/node = SubResource( 30 )
nodes/fragment/41/position = Vector2( 600, 540 )
nodes/fragment/42/node = SubResource( 31 )
nodes/fragment/42/position = Vector2( 460, 600 )
nodes/fragment/45/node = SubResource( 32 )
nodes/fragment/45/position = Vector2( 1000, 440 )
nodes/fragment/46/node = SubResource( 33 )
nodes/fragment/46/position = Vector2( 760, 640 )
nodes/fragment/50/node = SubResource( 34 )
nodes/fragment/50/position = Vector2( -460, 280 )
nodes/fragment/54/node = SubResource( 35 )
nodes/fragment/54/position = Vector2( -1680, 1060 )
nodes/fragment/55/node = SubResource( 36 )
nodes/fragment/55/position = Vector2( -1700, 960 )
nodes/fragment/56/node = SubResource( 37 )
nodes/fragment/56/position = Vector2( -1480, 960 )
nodes/fragment/57/node = SubResource( 38 )
nodes/fragment/57/position = Vector2( -1060, 1020 )
nodes/fragment/58/node = SubResource( 39 )
nodes/fragment/58/position = Vector2( -1280, 980 )
nodes/fragment/59/node = SubResource( 40 )
nodes/fragment/59/position = Vector2( -1280, 1100 )
nodes/fragment/60/node = SubResource( 42 )
nodes/fragment/60/position = Vector2( -1680, 1200 )
nodes/fragment/61/node = SubResource( 45 )
nodes/fragment/61/position = Vector2( -860, 1140 )
nodes/fragment/62/node = SubResource( 46 )
nodes/fragment/62/position = Vector2( -660, 1040 )
nodes/fragment/63/node = SubResource( 49 )
nodes/fragment/63/position = Vector2( -860, 1380 )
nodes/fragment/64/node = SubResource( 50 )
nodes/fragment/64/position = Vector2( -1680, 1280 )
nodes/fragment/65/node = SubResource( 51 )
nodes/fragment/65/position = Vector2( -1720, 1400 )
nodes/fragment/66/node = SubResource( 52 )
nodes/fragment/66/position = Vector2( -1280, 1240 )
nodes/fragment/67/node = SubResource( 53 )
nodes/fragment/67/position = Vector2( -1520, 1280 )
nodes/fragment/68/node = SubResource( 54 )
nodes/fragment/68/position = Vector2( -1100, 1280 )
nodes/fragment/69/node = SubResource( 55 )
nodes/fragment/69/position = Vector2( -600, 1180 )
nodes/fragment/70/node = SubResource( 56 )
nodes/fragment/70/position = Vector2( -1100, 1480 )
nodes/fragment/71/node = SubResource( 57 )
nodes/fragment/71/position = Vector2( -1300, 1480 )
nodes/fragment/72/node = SubResource( 58 )
nodes/fragment/72/position = Vector2( -80, 980 )
nodes/fragment/73/node = SubResource( 59 )
nodes/fragment/73/position = Vector2( -860, 1000 )
nodes/fragment/74/node = SubResource( 60 )
nodes/fragment/74/position = Vector2( -700, 700 )
nodes/fragment/78/node = SubResource( 61 )
nodes/fragment/78/position = Vector2( -640, 800 )
nodes/fragment/79/node = SubResource( 62 )
nodes/fragment/79/position = Vector2( -460, 720 )
nodes/fragment/80/node = SubResource( 64 )
nodes/fragment/80/position = Vector2( -260, 760 )
nodes/fragment/81/node = SubResource( 65 )
nodes/fragment/81/position = Vector2( -1020, 820 )
nodes/fragment/83/node = SubResource( 66 )
nodes/fragment/83/position = Vector2( -1480, 1160 )
nodes/fragment/84/node = SubResource( 67 )
nodes/fragment/84/position = Vector2( -1540, 1480 )
nodes/fragment/85/node = SubResource( 68 )
nodes/fragment/85/position = Vector2( -440, 860 )
nodes/fragment/86/node = SubResource( 69 )
nodes/fragment/86/position = Vector2( 1240, 500 )
nodes/fragment/88/node = SubResource( 70 )
nodes/fragment/88/position = Vector2( 1080, 680 )
nodes/fragment/89/node = SubResource( 71 )
nodes/fragment/89/position = Vector2( 1440, 540 )
nodes/fragment/90/node = SubResource( 72 )
nodes/fragment/90/position = Vector2( 1340, 720 )
nodes/fragment/connections = PoolIntArray( 8, 0, 11, 2, 10, 0, 8, 1, 3, 0, 11, 1, 11, 0, 12, 1, 23, 1, 24, 1, 22, 0, 23, 0, 23, 0, 25, 0, 24, 0, 20, 0, 25, 0, 21, 0, 23, 0, 26, 0, 26, 0, 24, 0, 23, 1, 27, 0, 27, 0, 25, 1, 28, 0, 26, 1, 28, 0, 27, 1, 35, 0, 34, 0, 36, 0, 34, 2, 34, 0, 38, 0, 39, 0, 6, 0, 6, 0, 3, 1, 39, 0, 3, 0, 37, 0, 34, 1, 3, 0, 41, 2, 19, 0, 41, 0, 42, 0, 41, 1, 12, 0, 0, 1, 41, 0, 45, 0, 46, 0, 45, 1, 2, 0, 50, 1, 50, 0, 3, 2, 17, 0, 50, 0, 55, 0, 56, 0, 54, 0, 56, 1, 58, 0, 57, 0, 59, 0, 58, 0, 56, 0, 59, 0, 64, 0, 67, 0, 67, 1, 68, 1, 67, 0, 66, 0, 66, 0, 68, 0, 68, 0, 61, 0, 61, 0, 69, 0, 63, 0, 69, 1, 70, 0, 63, 0, 67, 0, 70, 0, 71, 0, 70, 1, 67, 1, 71, 0, 69, 0, 62, 1, 62, 0, 72, 2, 57, 0, 73, 0, 73, 0, 62, 0, 78, 0, 79, 1, 74, 0, 79, 0, 79, 0, 80, 0, 80, 0, 10, 0, 81, 0, 78, 1, 60, 0, 83, 0, 83, 0, 59, 1, 65, 0, 84, 0, 84, 0, 71, 1, 84, 0, 66, 1, 69, 0, 78, 0, 81, 0, 85, 0, 85, 0, 80, 1, 45, 0, 86, 0, 88, 0, 86, 1, 72, 0, 88, 0, 86, 0, 89, 0, 89, 0, 0, 5, 90, 0, 89, 1, 72, 0, 45, 2 )

[sub_resource type="ShaderMaterial" id=74]
shader = SubResource( 73 )
shader_param/Drawing = -0.5
shader_param/Deformation = 0.2
shader_param/Emission = 0.9

[sub_resource type="VisualShaderNodeVectorDecompose" id=75]

[sub_resource type="VisualShaderNodeVectorCompose" id=76]

[sub_resource type="VisualShaderNodeInput" id=77]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=78]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=79]

[sub_resource type="NoiseTexture" id=80]
height = 1
noise = SubResource( 79 )

[sub_resource type="VisualShaderNodeTexture" id=81]
texture = SubResource( 80 )

[sub_resource type="VisualShaderNodeScalarOp" id=82]
operator = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=83]

[sub_resource type="VisualShaderNodeScalarOp" id=84]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=85]

[sub_resource type="VisualShaderNodeScalarOp" id=86]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id=87]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=88]

[sub_resource type="VisualShaderNodeColorConstant" id=89]
constant = Color( 0.111458, 0.140046, 0.635396, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=90]
constant = Color( 0.503145, 0.31604, 1, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=91]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=92]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=93]

[sub_resource type="VisualShaderNodeScalarOp" id=94]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=95]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.8, 2, 0.0 ]

[sub_resource type="VisualShaderNodeVectorDecompose" id=96]

[sub_resource type="VisualShaderNodeScalarUniform" id=97]
uniform_name = "height"

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=98]
output_port_for_preview = 0
default_input_values = [ 0, 0.2, 1, 0.4, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=99]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=100]
uniform_name = "Speed"

[sub_resource type="VisualShaderNodeScalarUniform" id=101]
uniform_name = "Resolution"

[sub_resource type="OpenSimplexNoise" id=102]
period = 30.2

[sub_resource type="NoiseTexture" id=103]
height = 1
noise = SubResource( 102 )

[sub_resource type="VisualShaderNodeTexture" id=104]
texture = SubResource( 103 )

[sub_resource type="VisualShaderNodeExpression" id=105]
output_port_for_preview = 0
size = Vector2( 543, 376 )
expression = "output0 = by - ((1.0+sin(noise * 3.14 * res)) / 4.0);"

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=106]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeInput" id=107]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=108]

[sub_resource type="VisualShader" id=109]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx, ambient_light_disabled;

uniform float height;
uniform float Speed;
uniform sampler2D tex_frg_5;
uniform sampler2D tex_frg_14;
uniform float Resolution;



void vertex() {
// Output:0

}

void fragment() {
// Input:24
	vec3 n_out24p0 = vec3(UV, 0.0);

// VectorDecompose:25
	float n_out25p0 = n_out24p0.x;
	float n_out25p1 = n_out24p0.y;
	float n_out25p2 = n_out24p0.z;

// ScalarSmoothStep:29
	float n_in29p0 = 1.00000;
	float n_in29p1 = 0.80000;
	float n_out29p0 = smoothstep(n_in29p0, n_in29p1, n_out25p1);

// ScalarUniform:32
	float n_out32p0 = height;

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// VectorDecompose:10
	float n_out10p0 = n_out8p0.x;
	float n_out10p1 = n_out8p0.y;
	float n_out10p2 = n_out8p0.z;

// Input:12
	float n_out12p0 = TIME;

// ScalarUniform:36
	float n_out36p0 = Speed;

// ScalarOp:13
	float n_out13p0 = n_out12p0 * n_out36p0;

// ScalarOp:9
	float n_out9p0 = n_out10p0 + n_out13p0;

// VectorCompose:11
	float n_in11p2 = 0.00000;
	vec3 n_out11p0 = vec3(n_out9p0, n_out10p1, n_in11p2);

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, n_out11p0.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorDecompose:16
	float n_out16p0 = n_out8p0.x;
	float n_out16p1 = n_out8p0.y;
	float n_out16p2 = n_out8p0.z;

// ScalarOp:17
	float n_out17p0 = n_out12p0 * n_out36p0;

// ScalarOp:15
	float n_out15p0 = n_out16p0 - n_out17p0;

// VectorCompose:18
	float n_in18p2 = 0.00000;
	vec3 n_out18p0 = vec3(n_out15p0, n_out16p1, n_in18p2);

// Texture:14
	vec4 tex_frg_14_read = texture(tex_frg_14, n_out18p0.xy);
	vec3 n_out14p0 = tex_frg_14_read.rgb;
	float n_out14p1 = tex_frg_14_read.a;

// ScalarOp:19
	float n_out19p0 = dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333)) * dot(n_out14p0, vec3(0.333333, 0.333333, 0.333333));

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorDecompose:3
	float n_out3p0 = n_out2p0.x;
	float n_out3p1 = n_out2p0.y;
	float n_out3p2 = n_out2p0.z;

// ScalarUniform:37
	float n_out37p0 = Resolution;

// Expression:6
	float n_out6p0;
	n_out6p0 = 0.0;
	{
		n_out6p0 = n_out3p1 - ((1.0+sin(n_out19p0 * 3.14 * n_out37p0)) / 4.0);
	}

// ScalarSmoothStep:7
	float n_in7p1 = 1.00000;
	float n_out7p0 = smoothstep(n_out32p0, n_in7p1, n_out6p0);

// ScalarOp:26
	float n_out26p0 = n_out29p0 * n_out7p0;

// Color:22
	vec3 n_out22p0 = vec3(0.503145, 0.316040, 1.000000);
	float n_out22p1 = 1.000000;

// Color:21
	vec3 n_out21p0 = vec3(0.111458, 0.140046, 0.635396);
	float n_out21p1 = 1.000000;

// ScalarSmoothStep:34
	float n_in34p0 = 0.20000;
	float n_in34p1 = 0.40000;
	float n_out34p0 = smoothstep(n_in34p0, n_in34p1, n_out19p0);

// VectorScalarMix:20
	vec3 n_out20p0 = mix(n_out22p0, n_out21p0, n_out34p0);

// ScalarOp:35
	float n_in35p1 = 2.00000;
	float n_out35p0 = n_out3p1 * n_in35p1;

// VectorOp:23
	vec3 n_out23p0 = n_out20p0 * vec3(n_out35p0);

// Output:0
	ALPHA = n_out26p0;
	EMISSION = n_out23p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 307.094, 381.339 )
modes/cull = 2
flags/ambient_light_disabled = true
nodes/fragment/0/position = Vector2( 1880, 220 )
nodes/fragment/2/node = SubResource( 87 )
nodes/fragment/2/position = Vector2( -400, 260 )
nodes/fragment/3/node = SubResource( 96 )
nodes/fragment/3/position = Vector2( -160, 220 )
nodes/fragment/5/node = SubResource( 104 )
nodes/fragment/5/position = Vector2( -120, 360 )
nodes/fragment/6/node = SubResource( 105 )
nodes/fragment/6/position = Vector2( 320, 80 )
nodes/fragment/6/size = Vector2( 543, 376 )
nodes/fragment/6/input_ports = "0,0,noise;1,0,by;2,0,res;"
nodes/fragment/6/output_ports = "0,0,output0;"
nodes/fragment/6/expression = "output0 = by - ((1.0+sin(noise * 3.14 * res)) / 4.0);"
nodes/fragment/7/node = SubResource( 106 )
nodes/fragment/7/position = Vector2( 980, 280 )
nodes/fragment/8/node = SubResource( 107 )
nodes/fragment/8/position = Vector2( -920, 540 )
nodes/fragment/9/node = SubResource( 108 )
nodes/fragment/9/position = Vector2( -460, 500 )
nodes/fragment/10/node = SubResource( 75 )
nodes/fragment/10/position = Vector2( -720, 540 )
nodes/fragment/11/node = SubResource( 76 )
nodes/fragment/11/position = Vector2( -480, 640 )
nodes/fragment/12/node = SubResource( 77 )
nodes/fragment/12/position = Vector2( -940, 620 )
nodes/fragment/13/node = SubResource( 78 )
nodes/fragment/13/position = Vector2( -720, 660 )
nodes/fragment/14/node = SubResource( 81 )
nodes/fragment/14/position = Vector2( -120, 600 )
nodes/fragment/15/node = SubResource( 82 )
nodes/fragment/15/position = Vector2( -460, 780 )
nodes/fragment/16/node = SubResource( 83 )
nodes/fragment/16/position = Vector2( -720, 800 )
nodes/fragment/17/node = SubResource( 84 )
nodes/fragment/17/position = Vector2( -720, 920 )
nodes/fragment/18/node = SubResource( 85 )
nodes/fragment/18/position = Vector2( -480, 900 )
nodes/fragment/19/node = SubResource( 86 )
nodes/fragment/19/position = Vector2( 100, 400 )
nodes/fragment/20/node = SubResource( 88 )
nodes/fragment/20/position = Vector2( 1100, 580 )
nodes/fragment/21/node = SubResource( 89 )
nodes/fragment/21/position = Vector2( 660, 520 )
nodes/fragment/22/node = SubResource( 90 )
nodes/fragment/22/position = Vector2( 660, 620 )
nodes/fragment/23/node = SubResource( 91 )
nodes/fragment/23/position = Vector2( 1340, 620 )
nodes/fragment/24/node = SubResource( 92 )
nodes/fragment/24/position = Vector2( 520, 20 )
nodes/fragment/25/node = SubResource( 93 )
nodes/fragment/25/position = Vector2( 680, 20 )
nodes/fragment/26/node = SubResource( 94 )
nodes/fragment/26/position = Vector2( 1280, 200 )
nodes/fragment/29/node = SubResource( 95 )
nodes/fragment/29/position = Vector2( 980, 40 )
nodes/fragment/32/node = SubResource( 97 )
nodes/fragment/32/position = Vector2( 700, 140 )
nodes/fragment/34/node = SubResource( 98 )
nodes/fragment/34/position = Vector2( 428, 695 )
nodes/fragment/35/node = SubResource( 99 )
nodes/fragment/35/position = Vector2( 1120, 700 )
nodes/fragment/36/node = SubResource( 100 )
nodes/fragment/36/position = Vector2( -1240, 860 )
nodes/fragment/37/node = SubResource( 101 )
nodes/fragment/37/position = Vector2( 42.3608, 95.1456 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 1, 6, 1, 6, 0, 7, 2, 8, 0, 10, 0, 10, 0, 9, 0, 9, 0, 11, 0, 10, 1, 11, 1, 11, 0, 5, 0, 12, 0, 13, 0, 13, 0, 9, 1, 16, 0, 15, 0, 15, 0, 18, 0, 16, 1, 18, 1, 17, 0, 15, 1, 8, 0, 16, 0, 12, 0, 17, 0, 18, 0, 14, 0, 14, 0, 19, 1, 21, 0, 20, 1, 22, 0, 20, 0, 20, 0, 23, 0, 24, 0, 25, 0, 7, 0, 26, 1, 25, 1, 29, 2, 29, 0, 26, 0, 19, 0, 6, 0, 5, 0, 19, 0, 23, 0, 0, 5, 19, 0, 34, 2, 34, 0, 20, 2, 35, 0, 23, 1, 3, 1, 35, 0, 32, 0, 7, 0, 26, 0, 0, 1, 36, 0, 13, 1, 36, 0, 17, 1, 37, 0, 6, 2 )

[sub_resource type="ShaderMaterial" id=110]
render_priority = 1
shader = SubResource( 109 )
shader_param/height = 1.0
shader_param/Speed = 0.04
shader_param/Resolution = 10.0

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=111]
output_port_for_preview = 0
default_input_values = [ 0, 0.15, 1, 0.4, 2, 0.0 ]

[sub_resource type="VisualShaderNodeInput" id=112]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=113]

[sub_resource type="OpenSimplexNoise" id=114]
period = 100.0

[sub_resource type="NoiseTexture" id=115]
seamless = true
noise = SubResource( 114 )

[sub_resource type="VisualShaderNodeTexture" id=116]
texture = SubResource( 115 )

[sub_resource type="VisualShaderNodeColorConstant" id=117]
constant = Color( 0.539062, 0.754227, 1, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=118]
default_input_values = [ 0, 0.0, 1, 0.4 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=119]
default_input_values = [ 0, 0.0, 1, 1.5 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=120]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=121]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=122]
default_input_values = [ 0, 1.2, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeFresnel" id=123]
default_input_values = [ 2, true, 3, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=124]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=125]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=126]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=127]
uniform_name = "Force"

[sub_resource type="VisualShaderNodeVectorDecompose" id=128]

[sub_resource type="VisualShaderNodeVectorCompose" id=129]

[sub_resource type="VisualShaderNodeInput" id=130]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=131]

[sub_resource type="VisualShaderNodeScalarOp" id=132]

[sub_resource type="VisualShader" id=133]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform sampler2D tex_frg_2;
uniform float Force;



void vertex() {
// Output:0

}

void fragment() {
// Color:25
	vec3 n_out25p0 = vec3(0.539062, 0.754227, 1.000000);
	float n_out25p1 = 1.000000;

// Fresnel:33
	float n_in33p3 = 1.00000;
	float n_out33p0 = pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in33p3);

// Input:7
	float n_out7p0 = TIME;

// ScalarOp:28
	float n_in28p1 = 0.40000;
	float n_out28p0 = n_out7p0 * n_in28p1;

// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorDecompose:5
	float n_out5p0 = n_out3p0.x;
	float n_out5p1 = n_out3p0.y;
	float n_out5p2 = n_out3p0.z;

// ScalarOp:8
	float n_out8p0 = n_out28p0 + n_out5p0;

// ScalarOp:29
	float n_in29p1 = 1.50000;
	float n_out29p0 = n_out7p0 * n_in29p1;

// ScalarOp:9
	float n_out9p0 = n_out29p0 + n_out5p1;

// VectorCompose:6
	float n_in6p2 = 0.00000;
	vec3 n_out6p0 = vec3(n_out8p0, n_out9p0, n_in6p2);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out6p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Input:11
	vec3 n_out11p0 = vec3(UV, 0.0);

// VectorDecompose:12
	float n_out12p0 = n_out11p0.x;
	float n_out12p1 = n_out11p0.y;
	float n_out12p2 = n_out11p0.z;

// ScalarOp:32
	float n_in32p0 = 1.20000;
	float n_out32p0 = n_in32p0 - n_out12p1;

// ScalarOp:35
	float n_out35p0 = n_out12p1 * n_out32p0;

// ScalarUniform:37
	float n_out37p0 = Force;

// ScalarOp:36
	float n_out36p0 = n_out35p0 * n_out37p0;

// ScalarOp:31
	float n_out31p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) * n_out36p0;

// ScalarSmoothStep:10
	float n_in10p0 = 0.15000;
	float n_in10p1 = 0.40000;
	float n_out10p0 = smoothstep(n_in10p0, n_in10p1, n_out31p0);

// ScalarOp:34
	float n_out34p0 = n_out33p0 * n_out10p0;

// Output:0
	ALBEDO = n_out25p0;
	ALPHA = n_out34p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 300.361, 335.396 )
modes/cull = 2
nodes/fragment/0/position = Vector2( 2000, 80 )
nodes/fragment/2/node = SubResource( 116 )
nodes/fragment/2/position = Vector2( 0, 180 )
nodes/fragment/3/node = SubResource( 120 )
nodes/fragment/3/position = Vector2( -920, 220 )
nodes/fragment/5/node = SubResource( 128 )
nodes/fragment/5/position = Vector2( -700, 240 )
nodes/fragment/6/node = SubResource( 129 )
nodes/fragment/6/position = Vector2( -200, 220 )
nodes/fragment/7/node = SubResource( 130 )
nodes/fragment/7/position = Vector2( -920, 140 )
nodes/fragment/8/node = SubResource( 131 )
nodes/fragment/8/position = Vector2( -340, 120 )
nodes/fragment/9/node = SubResource( 132 )
nodes/fragment/9/position = Vector2( -360, 280 )
nodes/fragment/10/node = SubResource( 111 )
nodes/fragment/10/position = Vector2( 1100, 180 )
nodes/fragment/11/node = SubResource( 112 )
nodes/fragment/11/position = Vector2( 60, 40 )
nodes/fragment/12/node = SubResource( 113 )
nodes/fragment/12/position = Vector2( 220, 40 )
nodes/fragment/25/node = SubResource( 117 )
nodes/fragment/25/position = Vector2( 1420, 320 )
nodes/fragment/28/node = SubResource( 118 )
nodes/fragment/28/position = Vector2( -500, 0 )
nodes/fragment/29/node = SubResource( 119 )
nodes/fragment/29/position = Vector2( -600, 360 )
nodes/fragment/31/node = SubResource( 121 )
nodes/fragment/31/position = Vector2( 920, 200 )
nodes/fragment/32/node = SubResource( 122 )
nodes/fragment/32/position = Vector2( 280, 360 )
nodes/fragment/33/node = SubResource( 123 )
nodes/fragment/33/position = Vector2( 1200, 20 )
nodes/fragment/34/node = SubResource( 124 )
nodes/fragment/34/position = Vector2( 1640, 60 )
nodes/fragment/35/node = SubResource( 125 )
nodes/fragment/35/position = Vector2( 520, 300 )
nodes/fragment/36/node = SubResource( 126 )
nodes/fragment/36/position = Vector2( 740, 340 )
nodes/fragment/37/node = SubResource( 127 )
nodes/fragment/37/position = Vector2( 520, 540 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 5, 0, 8, 1, 8, 0, 6, 0, 5, 1, 9, 1, 9, 0, 6, 1, 6, 0, 2, 0, 11, 0, 12, 0, 7, 0, 28, 0, 28, 0, 8, 0, 7, 0, 29, 0, 29, 0, 9, 0, 12, 1, 32, 1, 33, 0, 34, 0, 34, 0, 0, 1, 25, 0, 0, 0, 10, 0, 34, 1, 31, 0, 10, 2, 32, 0, 35, 1, 12, 1, 35, 0, 2, 0, 31, 0, 35, 0, 36, 0, 36, 0, 31, 1, 37, 0, 36, 1 )

[sub_resource type="ShaderMaterial" id=134]
shader = SubResource( 133 )
shader_param/Force = 0.0

[sub_resource type="PanoramaSky" id=135]
panorama = ExtResource( 3 )

[sub_resource type="Environment" id=136]
background_mode = 3
background_sky = SubResource( 135 )
ambient_light_sky_contribution = 0.5
tonemap_mode = 2
glow_enabled = true
glow_levels/1 = true
glow_levels/2 = true
glow_levels/4 = true
glow_levels/6 = true
glow_levels/7 = true
glow_intensity = 0.6

[sub_resource type="SpatialMaterial" id=137]
albedo_color = Color( 0.101961, 0.101961, 0.113725, 1 )

[sub_resource type="BoxShape" id=138]
extents = Vector3( 10, 0.1, 10 )

[sub_resource type="Animation" id=139]
resource_name = "Appear"
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath("magic_circle_mesh:material/0:shader_param/Drawing")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -0.5, 1.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("magic_circle_mesh:material/1:shader_param/height")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4, 0.6 ),
"transitions": PoolRealArray( 2, 1, -2 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("magic_circle_mesh:material/1:shader_param/Resolution")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.3, 0.9 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 10.0 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("OmniLight:light_energy")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.4, 0.6, 0.8 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.0, 2.0, 0.2 ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("magic_circle_mesh:material/2:shader_param/Force")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.4, 0.7, 1 ),
"transitions": PoolRealArray( 1, 1, 2, 0.5 ),
"update": 0,
"values": [ 0.0, 0.0, 1.2, 0.9 ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("magic_circle_mesh:material/0:shader_param/Deformation")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 0.8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.2, 0.0 ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("magic_circle_mesh:material/0:shader_param/Emission")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 0.6, 0.8 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.9, 1.2, 0.9 ]
}

[sub_resource type="Animation" id=140]
resource_name = "Invoke"
length = 0.7
tracks/0/type = "value"
tracks/0/path = NodePath("magic_circle_mesh:material/2:shader_param/Force")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.9, 1.2, 0.9 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("magic_circle_mesh:material/0:shader_param/Deformation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.1, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("magic_circle_mesh:material/0:shader_param/Emission")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.9, 2.0, 0.9 ]
}

[node name="Magic_circle" type="Spatial"]
script = ExtResource( 5 )
to_invoke = ExtResource( 6 )

[node name="Spatial" type="Spatial" parent="."]
visible = false

[node name="MeshInstance" type="MeshInstance" parent="Spatial"]
transform = Transform( 1.05, 0, 0, 0, 1, 0, 0, 0, 1.05, 0, 0, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 74 )

[node name="ring" type="MeshInstance" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0.19929, 0 )
mesh = ExtResource( 4 )
material/0 = SubResource( 110 )

[node name="ring2" type="MeshInstance" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0.6, 0 )
cast_shadow = 0
mesh = ExtResource( 4 )
material/0 = SubResource( 134 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 136 )

[node name="StaticBody" type="StaticBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.104474, 0 )

[node name="CSGBox" type="CSGBox" parent="StaticBody"]
width = 20.0
height = 0.2
depth = 20.0
material = SubResource( 137 )

[node name="CollisionShape" type="CollisionShape" parent="StaticBody"]
shape = SubResource( 138 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.224571, 0 )
light_color = Color( 0.615686, 1, 0.972549, 1 )
light_energy = 0.0
omni_attenuation = 2.0

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.707107, 0.449756, -0.545637, 0, 0.771647, 0.636051, 0.707107, -0.449756, 0.545637, -2, 2.5, 2 )
visible = false
fov = 40.0

[node name="magic_circle_mesh" type="MeshInstance" parent="."]
mesh = ExtResource( 8 )
material/0 = SubResource( 74 )
material/1 = SubResource( 110 )
material/2 = SubResource( 134 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Appear = SubResource( 139 )
anims/Invoke = SubResource( 140 )

[node name="Target" type="Position3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.891603, 0 )

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="Control"]
margin_left = 11.1118
margin_top = 12.6992
margin_right = 98.1118
margin_bottom = 62.6992
custom_constants/separation = 10
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Open" type="Button" parent="Control/VBoxContainer"]
margin_right = 87.0
margin_bottom = 20.0
text = "Open Circle"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Invoke" type="Button" parent="Control/VBoxContainer"]
margin_top = 30.0
margin_right = 87.0
margin_bottom = 50.0
text = "Invoke"
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="pressed" from="Control/VBoxContainer/Open" to="." method="_on_Open_pressed"]
[connection signal="pressed" from="Control/VBoxContainer/Invoke" to="." method="_on_Invoke_pressed"]
