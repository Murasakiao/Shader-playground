[gd_scene load_steps=43 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 4

[sub_resource type="VisualShaderNodeVectorOp" id=2]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=3]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
output_port_for_preview = 0
function = 12

[sub_resource type="VisualShaderNodeInput" id=7]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=8]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorOp" id=9]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="OpenSimplexNoise" id=12]
seed = 10

[sub_resource type="NoiseTexture" id=13]
seamless = true
noise = SubResource( 12 )

[sub_resource type="VisualShaderNodeTexture" id=14]
texture = SubResource( 13 )

[sub_resource type="OpenSimplexNoise" id=15]

[sub_resource type="NoiseTexture" id=16]
seamless = true
noise = SubResource( 15 )

[sub_resource type="VisualShaderNodeTexture" id=17]
output_port_for_preview = 0
texture = SubResource( 16 )

[sub_resource type="VisualShaderNodeTexture" id=18]
texture = SubResource( 16 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=19]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarConstant" id=20]
constant = 0.05

[sub_resource type="VisualShaderNodeInput" id=21]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=22]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorOp" id=23]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.1, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=24]
source = 1

[sub_resource type="VisualShaderNodeVectorOp" id=25]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=26]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=27]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=28]

[sub_resource type="VisualShaderNodeScalarOp" id=29]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=30]
constant = Color( 0.613281, 0.68277, 1, 1 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=31]

[sub_resource type="OpenSimplexNoise" id=32]

[sub_resource type="NoiseTexture" id=33]
seamless = true
noise = SubResource( 32 )

[sub_resource type="VisualShaderNodeTexture" id=34]
texture = SubResource( 33 )

[sub_resource type="VisualShaderNodeColorOp" id=35]
operator = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id=36]

[sub_resource type="VisualShaderNodeInput" id=37]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=38]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=39]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=40]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 4

[sub_resource type="VisualShader" id=41]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4;
uniform sampler2D tex_frg_22;
uniform sampler2D tex_frg_21;
uniform sampler2D tex_frg_23;



void vertex() {
// Output:0

}

void fragment() {
// Input:27
	vec3 n_out27p0 = vec3(SCREEN_UV, 0.0);

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;

// Input:6
	float n_out6p0 = TIME;

// ScalarOp:7
	float n_in7p1 = 0.10000;
	float n_out7p0 = n_out6p0 * n_in7p1;

// ScalarOp:10
	float n_in10p1 = 1.00000;
	float n_out10p0 = mod(n_out7p0, n_in10p1);

// VectorOp:11
	vec3 n_out11p0 = vec3(n_out5p0) * vec3(n_out10p0);

// Input:17
	vec3 n_out17p0 = vec3(UV, 0.0);

// VectorOp:18
	vec3 n_out18p0 = n_out11p0 + n_out17p0;

// Texture:22
	vec4 tex_frg_22_read = texture(tex_frg_22, n_out18p0.xy);
	vec3 n_out22p0 = tex_frg_22_read.rgb;
	float n_out22p1 = tex_frg_22_read.a;

// Texture:21
	vec4 tex_frg_21_read = texture(tex_frg_21, UV.xy);
	vec3 n_out21p0 = tex_frg_21_read.rgb;
	float n_out21p1 = tex_frg_21_read.a;

// VectorDecompose:20
	float n_out20p0 = n_out21p0.x;
	float n_out20p1 = n_out21p0.y;
	float n_out20p2 = n_out21p0.z;

// ScalarOp:8
	float n_in8p1 = 0.50000;
	float n_out8p0 = n_out7p0 + n_in8p1;

// ScalarOp:9
	float n_in9p1 = 1.00000;
	float n_out9p0 = mod(n_out8p0, n_in9p1);

// VectorOp:12
	vec3 n_out12p0 = vec3(n_out20p1) * vec3(n_out9p0);

// VectorOp:19
	vec3 n_out19p0 = n_out12p0 + n_out17p0;

// Texture:23
	vec4 tex_frg_23_read = texture(tex_frg_23, n_out19p0.xy);
	vec3 n_out23p0 = tex_frg_23_read.rgb;
	float n_out23p1 = tex_frg_23_read.a;

// ScalarOp:13
	float n_in13p1 = 2.00000;
	float n_out13p0 = n_out10p0 * n_in13p1;

// ScalarOp:14
	float n_in14p1 = 1.00000;
	float n_out14p0 = n_out13p0 - n_in14p1;

// ScalarFunc:15
	float n_out15p0 = abs(n_out14p0);

// VectorScalarMix:24
	vec3 n_out24p0 = mix(n_out22p0, n_out23p0, n_out15p0);

// Scalar:26
	float n_out26p0 = 0.050000;

// Input:33
	vec3 n_out33p0 = vec3(UV, 0.0);

// VectorDecompose:34
	float n_out34p0 = n_out33p0.x;
	float n_out34p1 = n_out33p0.y;
	float n_out34p2 = n_out33p0.z;

// ScalarOp:35
	float n_out35p0 = n_out26p0 * n_out34p0;

// VectorOp:29
	vec3 n_out29p0 = n_out24p0 * vec3(n_out35p0);

// VectorOp:28
	vec3 n_out28p0 = n_out27p0 + n_out29p0;

// ScalarOp:31
	float n_in31p1 = 2.00000;
	float n_out31p0 = n_out35p0 / n_in31p1;

// VectorOp:30
	vec3 n_out30p0 = n_out28p0 - vec3(n_out31p0);

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out30p0.xy, 0.0);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Color:38
	vec3 n_out38p0 = vec3(0.613281, 0.682770, 1.000000);
	float n_out38p1 = 1.000000;

// ColorOp:40
	vec3 n_out40p0;
	{
		float base = n_out3p0.x;
		float blend = n_out38p0.x;
		if (base < 0.5) {
			n_out40p0.x = 2.0 * base * blend;
		} else {
			n_out40p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.y;
		float blend = n_out38p0.y;
		if (base < 0.5) {
			n_out40p0.y = 2.0 * base * blend;
		} else {
			n_out40p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.z;
		float blend = n_out38p0.z;
		if (base < 0.5) {
			n_out40p0.z = 2.0 * base * blend;
		} else {
			n_out40p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// VectorScalarMix:39
	vec3 n_out39p0 = mix(n_out3p0, n_out40p0, n_out34p0);

// Output:0
	COLOR.rgb = n_out39p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 2313, 56 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2600, 260 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( 440, 0 )
nodes/fragment/3/node = SubResource( 24 )
nodes/fragment/3/position = Vector2( 2080, 240 )
nodes/fragment/4/node = SubResource( 34 )
nodes/fragment/4/position = Vector2( -480, -40 )
nodes/fragment/5/node = SubResource( 36 )
nodes/fragment/5/position = Vector2( -160, 60 )
nodes/fragment/6/node = SubResource( 37 )
nodes/fragment/6/position = Vector2( -400, 420 )
nodes/fragment/7/node = SubResource( 38 )
nodes/fragment/7/position = Vector2( -160, 400 )
nodes/fragment/8/node = SubResource( 39 )
nodes/fragment/8/position = Vector2( -160, 520 )
nodes/fragment/9/node = SubResource( 40 )
nodes/fragment/9/position = Vector2( 20, 520 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 20, 400 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 260, 80 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 280, 460 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 200, 680 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 400, 680 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 600, 720 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 260, 300 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( 520, 180 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( 560, 460 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( -160, 180 )
nodes/fragment/21/node = SubResource( 14 )
nodes/fragment/21/position = Vector2( -480, 160 )
nodes/fragment/22/node = SubResource( 17 )
nodes/fragment/22/position = Vector2( 800, 200 )
nodes/fragment/23/node = SubResource( 18 )
nodes/fragment/23/position = Vector2( 800, 540 )
nodes/fragment/24/node = SubResource( 19 )
nodes/fragment/24/position = Vector2( 980, 420 )
nodes/fragment/26/node = SubResource( 20 )
nodes/fragment/26/position = Vector2( 960, 640 )
nodes/fragment/27/node = SubResource( 21 )
nodes/fragment/27/position = Vector2( 1060, 180 )
nodes/fragment/28/node = SubResource( 22 )
nodes/fragment/28/position = Vector2( 1520, 280 )
nodes/fragment/29/node = SubResource( 23 )
nodes/fragment/29/position = Vector2( 1180, 400 )
nodes/fragment/30/node = SubResource( 25 )
nodes/fragment/30/position = Vector2( 1820, 280 )
nodes/fragment/31/node = SubResource( 26 )
nodes/fragment/31/position = Vector2( 1580, 560 )
nodes/fragment/33/node = SubResource( 27 )
nodes/fragment/33/position = Vector2( 940, 780 )
nodes/fragment/34/node = SubResource( 28 )
nodes/fragment/34/position = Vector2( 1100, 780 )
nodes/fragment/35/node = SubResource( 29 )
nodes/fragment/35/position = Vector2( 1240, 640 )
nodes/fragment/38/node = SubResource( 30 )
nodes/fragment/38/position = Vector2( 2100, 140 )
nodes/fragment/39/node = SubResource( 31 )
nodes/fragment/39/position = Vector2( 2300, 360 )
nodes/fragment/40/node = SubResource( 35 )
nodes/fragment/40/position = Vector2( 2320, 140 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 6, 0, 7, 0, 7, 0, 8, 0, 8, 0, 9, 0, 7, 0, 10, 0, 5, 0, 11, 0, 10, 0, 11, 1, 9, 0, 12, 1, 13, 0, 14, 0, 14, 0, 15, 0, 17, 0, 18, 1, 21, 0, 20, 0, 18, 0, 22, 0, 19, 0, 23, 0, 22, 0, 24, 0, 23, 0, 24, 1, 20, 1, 12, 0, 15, 0, 24, 2, 17, 0, 19, 1, 10, 0, 13, 0, 12, 0, 19, 0, 27, 0, 28, 0, 24, 0, 29, 0, 11, 0, 18, 0, 28, 0, 30, 0, 30, 0, 3, 0, 31, 0, 30, 1, 33, 0, 34, 0, 29, 0, 28, 1, 34, 0, 35, 1, 26, 0, 35, 0, 35, 0, 31, 0, 35, 0, 29, 1, 39, 0, 0, 0, 34, 0, 39, 2, 3, 0, 40, 0, 38, 0, 40, 1, 40, 0, 39, 1, 3, 0, 39, 0 )

[sub_resource type="ShaderMaterial" id=42]
shader = SubResource( 41 )

[node name="Node2D" type="Node2D"]

[node name="ColorRect2" type="ColorRect" parent="."]
margin_left = -8.0
margin_top = 416.0
margin_right = 1256.0
margin_bottom = 496.0
color = Color( 0.0588235, 0.054902, 0.0509804, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 42 )
margin_left = 456.0
margin_top = -128.0
margin_right = 1256.0
margin_bottom = 776.0
__meta__ = {
"_edit_use_anchors_": false
}
